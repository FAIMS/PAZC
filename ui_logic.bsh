
/*** 'Editable' - you can edit the code below based on the needs ***/
User user; // don't touch
String userid;

import java.util.concurrent.Callable;
import android.util.Log;
import java.io.File;
import jsqlite;
import jsqlite.Callback;

Log.d("PAZC Module", "Very first line of logic after imports.");

String WEB_GUIDE = " The FAIMS Excavation Demo Module was prepared in 2013 following a detailed comparison of 11 excavation recording sheets submitted by FAIMS partners. It serves the workflow of single-context, multi-trench excavation and the core definitions are derived from the Museum of London workbook.  <br><br> The module was the first one prepared using Heurist. It has been the basis of several other modules developed for specific projects, and is updated with key features required by partners. | <br><br> The purpose of this Guide is to provide an overview of the features and navigation of the Module. definitions and vocabulary lists for each Attribute are accessible via the Help button alongside each attribute. <br><br> ...MORE TO COME ";
String WEB_REL_1 = "Use this tab to enter relationships between contexts, eg 'Above' and 'Below'. Select the Type of Relationship on the left, the related Context from the list on the right, and click the button 'Relate Contexts'.";
String WEB_REL_2 = "To load or remove contexts, tap one from the list on the left and press button below:";
String WEB_REL_SELECTED_NONE = "<i>None</i>";

populateWebViewHtml("user/help/guide", WEB_GUIDE);
populateWebViewHtml("Context/Context_Relationships_to_Other_Contexts/spacer", WEB_REL_1);
populateWebViewHtml("Context/Context_Relationships_to_Other_Contexts/help", WEB_REL_2);
populateWebViewHtml("ContextGroup/ContextGroup_Contexts/help", WEB_REL_2);


makeLocalID(){
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);", null);
    fetchOne("DROP VIEW IF EXISTS parentchild;", null);
    fetchOne( "CREATE VIEW parentchild AS "+
            "  SELECT parent.uuid as parentuuid, child.uuid as childuuid, parent.participatesverb as parentparticipatesverb, parent.relationshipid, parent.aenttypename as parentaenttypename, child.participatesverb as childparticipatesverb "+
            "    FROM (SELECT uuid, participatesverb, aenttypename, relationshipid"+
            "            FROM latestnondeletedaentreln "+
            "            JOIN relationship USING (relationshipid) "+
            "            JOIN latestnondeletedarchent USING (uuid) "+
            "            JOIN aenttype USING (aenttypeid)) parent "+
            "    JOIN (SELECT uuid, relationshipid, participatesverb "+
            "            FROM latestnondeletedaentreln "+
            "            JOIN relationship USING (relationshipid)) child "+
            "      ON (parent.relationshipid = child.relationshipid AND parent.uuid != child.uuid);", null);

}

/*

SELECT childuuid, response
  FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers on (childuuid = uuid) JOIN createdmodifiedatby USING (uuid)
 WHERE relationshipid in (SELECT relationshipid 
                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid) 
                           WHERE relntypename = 'ContextSample')
   and parentaenttypename = 'Context'
 ORDER BY  createdat desc;

*/

makeLocalID();

/** Vocab Population -- copied from lake mungo.**/
/** Wrapper for to make a vocab without an exlusion list **/
makeVocab(String type, String path, String attrib) {
  makeVocab(type, path, attrib, null);
}

/*** 'Editable' - you can edit the code below based on the needs ***/
/** Vocab Population **/
/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (PictureGallery, HierarchicalPictureGallery, CheckBoxGroup, DropDown, HierarchicalDropDown, RadioGroup or List). */
makeVocab(String type, String path, String attrib, List vocabExclusions) {
    makeVocab(type, path, attrib, vocabExclusions, null);
}

/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (PictureGallery, HierarchicalPictureGallery, CheckBoxGroup, DropDown, HierarchicalDropDown, RadioGroup or List). */
makeVocab(String type, String path, String attrib, List vocabExclusions, String callbackFunction){
  if (isNull(type) || isNull(path) || isNull(attrib)) {
    Log.e("makeVocab()", "Can't make populate a vocab when the given type, path or attribute is Null");
    return;
  }

  if (type.equals("PictureGallery")) {
    String pictureGalleryQuery = "SELECT vocabid, vocabname, pictureurl "+
                                 "  FROM vocabulary "+
                                 "  LEFT OUTER JOIN attributekey USING (attributeid) "+
                                 " WHERE attributename = '" + attrib + "' "+
                                 " ORDER BY  vocabcountorder;";
    fetchAll(pictureGalleryQuery, new FetchCallback() {
      onFetch(pictures) {
        populatePictureGallery(path, pictures);
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
    return;
  }

  if (type.equals("HierarchicalPictureGallery")) {
    populateHierarchicalPictureGallery(path, attrib);
    if (callbackFunction != null && !isNull(callbackFunction)) {
      execute(callbackFunction);
    }
    return;
  }

  if (type.equals("HierarchicalDropDown")) {
    // populateHierarchicalDropDown(path, attrib);
    populateHierarchicalDropDown(path, attrib, true);
    if (callbackFunction != null && !isNull(callbackFunction)) {
      execute(callbackFunction);
    }
    return;
  }

  String getAttributeVocabQuery = "SELECT vocabid, vocabname "+
                                  "  FROM vocabulary "+
                                  "  JOIN attributekey USING (attributeid) "+
                                  " WHERE attributename = '" + attrib + "' "+
                                  " ORDER BY vocabcountorder;";
  fetchAll(getAttributeVocabQuery,
    new FetchCallback() {
      onFetch(result) {
        // print("makeVocab() result: " + result);
        if (result!=null && result.size()>0 && vocabExclusions!=null && vocabExclusions.size()>0) {
          List filteredVocab = new ArrayList();
          for(item : result) {
            if (vocabExclusions.contains(item.get(1))) {
              Log.d("makeVocab()", "removing vocab exclusion: " + item.get(1));
            } else {
              filteredVocab.add(item);
            }
          }
          result=filteredVocab;
        }
        // print("makeVocab() filtered result: " + result);
        if(type.equals("CheckBoxGroup")) {
          populateCheckBoxGroup(path, result);
        } else if(type.equals("DropDown")) {
          // populateDropDown(path, result);
          populateDropDown(path, result, true);
        } else if(type.equals("RadioGroup")) {
          populateRadioGroup(path, result);
        } else if(type.equals("List")) {
          populateList(path, result);
        }
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
}

/** Entity Relationship Saving **/
/** Saves two entity id's as a relation. **/
saveEntitiesToRel(String type, String entity1, String entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
        }
    });
}

/** Saves two entity id's as a relation with some callback executed. **/
saveEntitiesToRel(String type, String entity1, String entity2, String callback) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
            if(!isNull(callback)) {
               execute(callback);
            }
        }
    });
}

/** Saves two entity id's as a hierachical relation with some callback executed. **/
saveEntitiesToHierRel(String type, String entity1, String entity2, String e1verb, String e2verb, String callback) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, e1verb);
            addReln(entity2, rel_id, e2verb);
            if(!isNull(callback)) {
               execute(callback);
            }
        }
    });
}

setTimestamp(String path) {
    setFieldValue(path, new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss z").format(new Date()));
}

/** Action Bar **/
addActionBarItem("clean_synced_files", new ActionButtonCallback() {
    actionOnLabel() {
      "{Clean_Synced_Files}";
    }
    actionOn() {
      cleanSyncedFiles();
    }
});

addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Disable_Sync}";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("{Sync_Disabled}");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "{Enable_Sync}";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("{Sync_Enabled}");
    }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Disable_Internal_GPS}";
    }
    actionOn() {
        stopGPS();
        showToast("{Internal_GPS_Disabled}");
        updateGPSDiagnostics();
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "{Enable_Internal_GPS}";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("{Internal_GPS_Enabled}");
        updateGPSDiagnostics();
    }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Disable_External_GPS}";
    }
    actionOn() {
        stopGPS();
        if (isBluetoothConnected()) {
          showToast("{External_GPS_Disabled}");
        } else {
          showToast("{Please_Enable_Bluetooth}");
        }
        updateGPSDiagnostics();
    }
    isActionOff() {
        isExternalGPSOn();
    }
    actionOffLabel() {
        "{Enable_External_GPS}";
    }
    actionOff() {
        if(isInternalGPSOn()) {
            stopGPS();
        }
        startExternalGPS();
        if(isBluetoothConnected()) {
            showToast("{External_GPS_Enabled}");
        } else {
            showToast("{Please_Enable_Bluetooth}");
            this.actionOn();
        }
        updateGPSDiagnostics();
    }
});

/*** Navigation Drawer ***/
removeNavigationButtons() {
  removeNavigationButton("new");
  removeNavigationButton("duplicate");
  removeNavigationButton("delete");
}

addNavigationButtons(String tabgroup) {
  removeNavigationButtons();
  addNavigationButton("new", new ActionButtonCallback() {
    actionOnLabel() {
      "{New}";
    }
    actionOn() {
      if(!isNull(getRecordId(tabgroup))) {
          newRecord(tabgroup);
          showToast("{New_record_created}");
      } else {
          showAlert("{Warning}", "{Any_unsaved_changes_will_be_lost}", "newRecord(\""+tabgroup+"\")", "");
      }
    }
  }, "success");
  addNavigationButton("duplicate", new ActionButtonCallback() {
    actionOnLabel() {
      "{Duplicate}";
    }
    actionOn() {
      if(!isNull(getRecordId(tabgroup))) {
          duplicateRecord(tabgroup);
      } else {
          showWarning("{Warning}", "{This_record_is_unsaved_and_cannot_be_duplicated}");
      }
    }
  }, "primary");
  addNavigationButton("delete", new ActionButtonCallback() {
    actionOnLabel() {
      "{Delete}";
    }
    actionOn() {
      deleteRecord(tabgroup, getRecordId(tabgroup));
    }
  }, "danger");
}

// Returns the record id of the given tabgroup
getRecordId(String tabgroup) {
  if (tabgroup.equals("Context")) {
    return context_id;
  } else if (tabgroup.equals("ContextGroup")) {
    return context_group_id;
  } else if (tabgroup.equals("Artefact_Group")) {
    return artefact_group_id;
  } else if (tabgroup.equals("Sample")) {
    return sample_id;
  } else if (tabgroup.equals("Matrix")) {
    return matrix_id;
  } else if (tabgroup.equals("Special_Find")) {
    return special_find_id;
  } else if (tabgroup.equals("Adobe_Element")) {
    return adobe_id;
  } else if (tabgroup.equals("Photograph_Log")) {
    return photolog_id;
  } else {
    Log.e("PAZC Module", "Can't get the record id for the tabgroup '"+tabgroup+"'");
    return;
  }
}

// Makes a new record of the given tabgroup
newRecord(String tabgroup) {
  if (tabgroup.equals("Context")) {
    cancelTabGroup(tabgroup, false);
    newContext();
  } else if (tabgroup.equals("ContextGroup")) {
    cancelTabGroup(tabgroup, false);
    newContextGroup(true);
  } else if (tabgroup.equals("Artefact_Group")) {
    cancelTabGroup(tabgroup, false);
    newArtefactGroup();
  } else if (tabgroup.equals("Sample")) {
    cancelTabGroup(tabgroup, false);
    newSample();
  } else if (tabgroup.equals("Matrix")) {
    cancelTabGroup(tabgroup, false);
    newMatrix();
  } else if (tabgroup.equals("Special_Find")) {
    cancelTabGroup(tabgroup, false);
    newSpecialFind();
  } else if (tabgroup.equals("Adobe_Element")) {
    cancelTabGroup(tabgroup, false);
    newAdobe();
  } else if (tabgroup.equals("Photograph_Log")) {
    cancelTabGroup(tabgroup, false);
    newPhotoLog();
  } else {
    Log.e("PAZC Module", "Can't make new record for the tabgroup '"+tabgroup+"'");
    return;
  }
}

// Duplicates the current record of the given tabgroup
duplicateRecord(String tabgroup) {
  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      showToast("{Duplicated_record}");
    }
  };
  if (tabgroup.equals("Context")) {
    duplicateTabGroup(tabgroup, null, null, null, saveCallback);
  } else if (tabgroup.equals("ContextGroup")) {
    duplicateTabGroup(tabgroup, null, null, null, saveCallback);
  } else if (tabgroup.equals("Artefact_Group")) {
    duplicateTabGroup(tabgroup, null, null, null, saveCallback);
  } else if (tabgroup.equals("Sample")) {
    duplicateTabGroup(tabgroup, null, null, null, saveCallback);
  } else if (tabgroup.equals("Matrix")) {
    duplicateTabGroup(tabgroup, null, null, null, saveCallback);
  } else if (tabgroup.equals("Special_Find")) {
    duplicateTabGroup(tabgroup, null, null, null, saveCallback);
  } else if (tabgroup.equals("Adobe_Element")) {
    duplicateTabGroup(tabgroup, null, null, null, saveCallback);
  } else if (tabgroup.equals("Photograph_Log")) {
    duplicateTabGroup(tabgroup, null, null, null, saveCallback);
  } else {
    Log.e("PAZC Module", "Can't make duplicate the record for the tabgroup '"+tabgroup+"'");
    return;
  }
}

// Deletes the current record of the given tabgroup
deleteRecord(String tabgroup, String id) {
  if (tabgroup.equals("Context")) {
    deleteContext();
  } else if (tabgroup.equals("ContextGroup")) {
    deleteContextGroup();
  } else if (tabgroup.equals("Artefact_Group")) {
    deleteArtefactGroup();
  } else if (tabgroup.equals("Sample")) {
    deleteSample();
  } else if (tabgroup.equals("Matrix")) {
    deleteMatrix();
  } else if (tabgroup.equals("Special_Find")) {
    deleteSpecialFind();
  } else if (tabgroup.equals("Adobe_Element")) {
    deleteAdobe();
  } else if (tabgroup.equals("Photograph_Log")) {
    deletePhotoLog();
  } else {
    Log.e("PAZC Module", "Can't delete the record for the tabgroup '"+tabgroup+"' of id '"+id+"'");
    return;
  }
}

/*** GPS ***/

updateGPSDiagnostics() {
    String status = "";
    String previousStatus = getFieldValue("control/data/GPS_Diagnostics");
    String notInitialised = "{GPS_is_not_initialised}";

    // Check if GPS is initialised or was previously initialised.
    if (!isExternalGPSOn() && !isInternalGPSOn()) {
        if (!isNull(previousStatus) && !previousStatus.equals(notInitialised)) {
            // previous gps status is some last valid coordinate.
            String error = "{GPS_is_no_longer_initialised}. {Previous_status}:";
            // check that error message wasn't previously appended to the previous status message.
            if (previousStatus.length() < error.length() ||
                    previousStatus.subSequence(0, error.length()).equals(error)) {
                status = previousStatus;
            } else {
                status = error + "\n" + previousStatus;
            }
        } else {
            status = notInitialised;
        }
    } else {
        status += "{Internal_GPS}: ";
        if (isInternalGPSOn())
        {
            status += "{on}";
        } else {
            status += "{off}";
        }
        status += "\nExternal GPS: ";
        if (isExternalGPSOn())
        {
            if (isBluetoothConnected()) {
                status += "{on_and_bluetooth_connected}";
            } else {
                status += "{on_and_bluetooth_disconnected}";
            }
        } else {
            status += "{off}";
        }
        Object position = getGPSPosition();
        if (position != null) {
            Object projPosition = getGPSPositionProjected();
            status += "\n{Latitude}: " + position.getLatitude();
            status += "   {Longitude}: " + position.getLongitude();
            status += "\n{Northing}: " + projPosition.getLatitude();
            status += "   {Easting}: " + projPosition.getLongitude();
            status += "\n{Accuracy}: " + getGPSEstimatedAccuracy();
        } else {
            status += "\n{Position}: {no_GPS_position_could_be_found}";
        }
    }
    setFieldValue("control/data/GPS_Diagnostics", status);
}


/*** SYNC ***/
setSyncMinInterval(120.0f);
setSyncMaxInterval(600.0f);
setSyncDelay(5.0f);
/*setSyncEnabled(true);
setFileSyncEnabled(true);*/

// TODO: Delete this paragraph after development is complete.
setSyncMinInterval(4.0f);
setSyncMaxInterval(6.0f);
setSyncDelay(5.0f);
setSyncEnabled(true);


/*** 'Uneditable' - you can edit the code below with extreme precaution ***/

/*** USER ***/


populateListForUsers(){
    // Populate user dropdown

    String getNonDeletedUsersQuery = "SELECT userid, fname || ' ' || lname "+
                                     "  FROM user "+
                                     " WHERE userdeleted is null;";

    fetchAll(getNonDeletedUsersQuery, new FetchCallback() {
        onFetch(result) {
            populateDropDown("user/usertab/users", result, true);
            String userQ = localSettingsQuery("User_VocabID");
            fetchOne(userQ, new FetchCallback() {
              onFetch(result) {
                if (!isNull(result)) {
                  setFieldValue("user/usertab/users", result.get(0));
                }
              }  
            });
        }
    });
}



String username = "";
String device = "";
String areaCode = "";

login(){
    if(isNull(getFieldValue("user/usertab/Area_Code")) || isNull(getFieldValue("user/usertab/users")) || isNull(getFieldValue("user/usertab/Device_Code"))){
        showWarning("{Warning}", "{Please_select_a_User_and_an_Area_Code_and_a_Device_Code_before_logging_in}");
        return;
    } else {
        String userVocabId = getFieldValue("user/usertab/users");
        fetchOne("SELECT userid,fname,lname,email FROM user WHERE userid='" + userVocabId + "';", new FetchCallback() {
            onFetch(result) {
                user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
                setUser(user);
                username = result.get(1) + " " + result.get(2);

                showTabGroup("control");
                loadStartingIds();
            }

        });

        // store the user and area code into local settings, and set the globals
        areaCode = getFieldValue("user/usertab/Area_Code");
        device = getFieldValue("user/usertab/Device_Code");
        saveLoginDetails();
    }
}

saveLoginDetails() {
  fetchOne("REPLACE INTO localSettings(key, value) VALUES('User_VocabID', '"+getFieldValue("user/usertab/users")+"');");
  fetchOne("REPLACE INTO localSettings(key, value) VALUES('AreaCode_VocabID', '"+getFieldValue("user/usertab/Area_Code")+"');");
  fetchOne("REPLACE INTO localSettings(key, value) VALUES('DeviceCode_VocabID', '"+getFieldValue("user/usertab/Device_Code")+"');");
  fetchOne("REPLACE INTO localsettings(key, value) SELECT 'AreaCode_VocabName', vocabname FROM vocabulary WHERE vocabid = "+getFieldValue("user/usertab/Area_Code")+";");
  fetchOne("REPLACE INTO localsettings(key, value) SELECT 'DeviceCode_VocabName', vocabname FROM vocabulary WHERE vocabid = "+getFieldValue("user/usertab/Device_Code")+";");
}

localSettingsQuery(String key) {
  return "select vocabid, vocabname from vocabulary join localSettings on (value=vocabid) where key = '"+key+"' ";
}

insertIntoLocalSettings(String key, String val) {
    fetchOne("REPLACE INTO localSettings(key, value) VALUES('" + key + "', '" + val + "');");
}
insertIntoLocalSettings(String key, Integer val) {
    insertIntoLocalSettings(key, Integer.toString(val));
}

loadLoginDetails() {
  String userQ = localSettingsQuery("User_VocabID");
  String areaCodeQ = localSettingsQuery("AreaCode_VocabID");
  String deviceCodeQ = localSettingsQuery("DeviceCode_VocabID");
  fetchOne(userQ, new FetchCallback() {
    onFetch(result) {
      if (!isNull(result)) {
        setFieldValue("user/usertab/users", result.get(0));
      }
    }  
  });
  fetchOne(areaCodeQ, new FetchCallback() {
    onFetch(result) {
      if (!isNull(result)) {
        setFieldValue("user/usertab/Area_Code", result.get(0));
      }
    }  
  });
  fetchOne(deviceCodeQ, new FetchCallback() {
    onFetch(result) {
      if (!isNull(result)) {
        setFieldValue("user/usertab/Device_Code", result.get(0));
      }
    }  
  });
}

loadStartingIds() {
    List l = new ArrayList();
    l.add("control/data/Adobe_Element_Starting_ID");
    l.add("control/data/Artefact_Group_Starting_ID");
    l.add("control/data/SpecialFind_Starting_ID");
    l.add("control/data/ContextIncrement");
    l.add("control/data/Sample_Starting_ID");

    for (ref : l) {
        loadStartingId(ref);
    }
    for (ref : l) {
        onFocus(ref, null,  "insertIntoLocalSettings(\"" + ref + "\", getFieldValue(\"" + ref + "\"));");
    }
}

loadStartingId(String ref) {
    String idQ = "SELECT value FROM localSettings WHERE key = '" + ref + "';";
    fetchOne(idQ, new FetchCallback() {
        onFetch(result) {
            if (!isNull(result)) {
                setFieldValue(ref, result.get(0));
            } else {
                setFieldValue(ref, "1");
            }
        }
    });
}


makeVocab("DropDown", "user/usertab/Area_Code", "AreaCode");
makeVocab("DropDown", "user/usertab/Device_Code", "Device Code");
onEvent("user", "load", "loadLoginDetails()");
onEvent("user", "show", "removeNavigationButtons()");
onEvent("user/usertab/", "show", "populateListForUsers()");
onEvent("user/usertab/login", "click", "login()");
onEvent("user/usertab/guide", "click", "showTab(\"user/help\")");

/*** end user login code ***/
    
/*** control ***/
makeVocab("DropDown", "control/search/Area_Code", "AreaCode");
onEvent("control"                     , "show"  , "removeNavigationButtons(); setSearchAreaCode();");
onEvent("control/data"                , "show"  , "refreshEntities(); updateGPSDiagnostics();");
onEvent("control/data/newContext"     , "click" , "newContext();");
onEvent("control/data/newContextGroup", "click" , "newContextGroup(true);");
onEvent("control/search"              , "show"  , "search();");
onEvent("control/search/Search"       , "click" , "clearSearch()");
onEvent("control/search/searchButton" , "click" , "search()");
onEvent("control/search/entityTypes"  , "click" , "search()");
onEvent("control/search/Area_Code"    , "click" , "search()");
onEvent("control/search/entityList"   , "click" , "loadEntity();");

setSearchAreaCode() {
    setFieldValue("control/search/Area_Code", getFieldValue("user/usertab/Area_Code"));
}

clearSearch(){
    setFieldValue("control/search/Search","");
}

refreshEntities() {
    context_id = null;
    context_group_id = null;
    menu = false;
}

search(){
    String type = getFieldValue("control/search/entityTypes");
    String areaCode = getFieldValue("control/search/Area_Code");
    String term = getFieldValue("control/search/Search");
    String searchQuery = "SELECT uuid, response "+
                         "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
                         " WHERE uuid in (SELECT uuid "+
                         "                    FROM latestNonDeletedArchEntIdentifiers "+
                         "                   WHERE attributename != 'Site Code' "+
                         "                     AND measure LIKE '"+term+"'||'%'  "+
                         "                     AND ( aenttypename LIKE '"+type+"' OR 'All' = '"+type+"' ) "+                         
                         "                  )  "+
                         "   AND (   'null' = '"+areaCode+"'  "+
                         "        OR uuid in (SELECT uuid "+
                         "                     FROM latestnondeletedaentvalue  "+
                         "                     JOIN attributekey using (attributeid) "+
                         "                    WHERE attributename = 'AreaCode' "+
                         "                      AND vocabid = '"+areaCode+"') "+
                         "       ) "+
                         " ORDER BY response "+
                         " LIMIT ? "+
                         "OFFSET ? ";
                  

    populateCursorList("control/search/entityList", searchQuery, 25);
    refreshTabgroupCSS("control");
    Log.d("foo", searchQuery);
}

entityTypes = new ArrayList();
entityTypes.add(0, new NameValuePair("{All}", "All"));
entityTypes.add(new NameValuePair("{Context}", "Context"));
entityTypes.add(new NameValuePair("{Context_Group}", "Context Group"));
entityTypes.add(new NameValuePair("{Artefact_Group}", "Artefact Group"));
entityTypes.add(new NameValuePair("{Sample}", "Sample"));
entityTypes.add(new NameValuePair("{Matrix}", "Matrix"));
entityTypes.add(new NameValuePair("{Special_Find}", "Special Find"));
entityTypes.add(new NameValuePair("{Adobe}", "Adobe Element"));
entityTypes.add(new NameValuePair("{Photograph_Log}", "Photograph Log"));
populateDropDown("control/search/entityTypes", entityTypes);

loadEntity() {
  loadEntityFrom(getListItemValue());
}

loadEntityFrom(String entityID) {
  if (!isNull(entityID)) {
    fetchAll("select aenttypename from latestnondeletedarchent join aenttype using (aenttypeid) where uuid = '" + entityID + "';", new FetchCallback() {
      onFetch(result) {
        String name = result.get(0).get(0);
        if (name.equals("Context")) {
          loadContextFrom(entityID);
        } else if (name.equals("Legacy")) {
          showWarning("{Alert}", "{This_is_a_legacy_identifier_and_is_not_viewable_on_the_device}");
        } else if (name.equals("Context Group")) {
          loadContextGroupFrom(entityID);
        } else if (name.equals("Artefact Group")) {
          loadArtefactGroupFrom(entityID);
        } else if (name.equals("Sample")) {
          loadSampleFrom(entityID);
        } else if (name.equals("Matrix")) {
          loadMatrixFrom(entityID);
        } else if (name.equals("Special Find")) {
          loadSpecialFindFrom(entityID);
        } else if (name.equals("Special Find Location")) {
          loadSpecialFindLocationFrom(entityID);
        } else if (name.equals("Adobe Element")) {
          loadAdobeFrom(entityID);
        } else if (name.equals("Photograph Log")) {
          loadPhotoLogFrom(entityID);
        }
      }
    });
  } else {
    Log.e("PAZC Module", "Cannot load an entity with a null ID.");
  }
}

/*** ArchEnt: Context ***/
onEvent("Context", "show", "addNavigationButtons(\"Context\"); openContextTabs(); keepTabGroupChanges(\"Context\"); saveContext(\"\");");
onEvent("Context", "load", "showTab(\"Context/Context_Deposits\");");
onEvent("Context", "load", "showTab(\"Context/Context_Cuts\");");
onEvent("Context", "load", "showTab(\"Context/Context_Structures\");");

onEvent("Context/Context_GeneralInformation/Details","click","openContextTabs();");
onEvent("Context/Context_GeneralInformation/close", "click", "fillInCloseDate()");
onEvent("Context/Texture_Helper/Update_Texture", "click", "setTextureActual()");
onEvent("Context/Texture_Helper/Return", "click", "returnToContext()");
onEvent("Context/Context_Deposits/Texture_Helper", "click", "helpSetTextureActual()");

onEvent("Context/Context_Deposits/newMatrix", "click", "newMatrix();");
onEvent("Context/Context_Deposits/loadMatrix", "click", "loadMatrix()");
onEvent("Context/Context_Deposits/deleteMatrix", "click", "deleteMatrixFromContext()");

onEvent("Context/Context_Interpretation/AddContextGroup", "click", "newContextGroup(false)");
onEvent("Context/Context_Interpretation/ShowContextGroup", "click", "loadContextGroupFromContext()");
onEvent("Context/Context_Interpretation/RemoveFromContextGroup", "click", "removeContextGroupReln()");

onEvent("Context/Context_Structures/newAdobe", "click", "newAdobe();");
onEvent("Context/Context_Structures/loadAdobe", "click", "loadAdobe()");
onEvent("Context/Context_Structures/deleteAdobe", "click", "deleteAdobeFromContext()");
onEvent("Context/Context_Structures", "show", "updateAllContextAdobes()");

onEvent("Context/Context_Attachments/newPhotoLog", "click", "newPhotoLog();");
onEvent("Context/Context_Attachments/loadPhotoLog", "click", "loadPhotoLog()");
onEvent("Context/Context_Attachments/deletePhotoLog", "click", "deletePhotoLogFromContext()");

onEvent("Context/Context_Attachments/attachPhoto", "click", "attachPictureTo(\"Context/Context_Attachments/Photo\")");
onEvent("Context/Context_Attachments/attachSketch", "click", "attachFileTo(\"Context/Context_Attachments/Sketch\")");
onEvent("Context/Context_Attachments/viewattached", "click", "viewArchEntAttachedFiles(context_id)");

onEvent("Context/Context_Artefacts/newArtefactGroup"  , "delayclick" , "newArtefactGroup();");
onEvent("Context/Context_Artefacts/newSpecialFind"    , "delayclick" , "newSpecialFind();");
onEvent("Context/Context_Artefacts/artefactGroupList" , "click"      , "loadArtefactGroup()");
onEvent("Context/Context_Artefacts/specialFindList"   , "click"      , "loadSpecialFind()");

onEvent("Context/Context_Samples/newSample", "click", "newSample();");
onEvent("Context/Context_Samples/loadSample", "click", "loadSample()");
onEvent("Context/Context_Samples/deleteSample", "click", "deleteSampleFromContext()");

onEvent("Context/Context_Deposits", "show", "updateAllContextMatrices()");
onEvent("Context/Context_Interpretation", "show", "updateAllContextGroups()");

onEvent("Context/Context_Relationships_to_Other_Contexts", "show", "updateContextIdentifier();;updateContextRelationshipTargetArea(); updateRelns(); ");
onEvent("Context/Context_Relationships_to_Other_Contexts/Populate_Target_Context", "delayclick", "updateAllContextRelationships(); populateWebViewHtml(\"Context/Context_Relationships_to_Other_Contexts/selectedEnt\", WEB_REL_SELECTED_NONE);");
onEvent("Context/Context_Relationships_to_Other_Contexts/createLegacy", "delayclick", "showTextAlert(\"Alert\", \"Legacy identifier:\", \"legacyTextInput()\",  null)");
legacyTextInput() {
  String legacyID = getLastTextAlertInput();
  Log.d("PAZC 2.0 Module", "Legacy ID: " + legacyID);
  List attributes = createAttributeList();
  attributes.add(createEntityAttribute("Identifier", null, null, legacyID, null));
  saveArchEnt(null, "Legacy", null, attributes, new SaveCallback() {
    onSave(uuid, newRecord){
      if (newRecord) {
        showToast("Created legacy with identifier: " + legacyID);
      }
    }
  });
}

onEvent("Context/Context_Artefacts", "show", "updateAllContextArtefacts()");
onEvent("Context/Context_Samples", "show", "updateAllContextSamples()");
onEvent("Context/Context_Attachments", "show", "updateAllContextPhotologs()");

onEvent("Context/Context_Relationships_to_Other_Contexts/relate", "delayclick", "makeHierReln()");
onEvent("Context/Context_Relationships_to_Other_Contexts/showReln", "click", "loadContextFromReln()");
onEvent("Context/Context_Relationships_to_Other_Contexts/deleteReln", "delayclick", "deleteReln()");
onEvent("Context/Context_Relationships_to_Other_Contexts/listOfRelns", "click", "selectAssociatedEntityContext()");

String moduleExcavationSite = "";
String moduleExcavationYear = "2015";
String moduleSiteCode = moduleExcavationSite + moduleExcavationYear;
String context_id = null;

Object dialog;

fieldPair(String ref, String name) {
    List fp = new ArrayList();
    fp.add(ref);
    fp.add(name);
    return fp;
}
/* Returns true if field specified by `ref` is valid. False otherwise.
 */
isValidField(String ref) {
    return !isNull(getFieldValue(ref));
}
/* `format` can either be HTML or PLAINTEXT
 */
validateFields(List fields, String format) {
    Integer numInvalid = 0;

    /* Build validation message string (and count how many invalid fields exist) */
    String out = "Please fill out the following fields:\n";
    for(f : fields) {
        String ref  = f.get(0); // Reference to field
        String name = f.get(1); // Human-readable name

        if (!isValidField(ref)) {
            out += "- " + name + "\n";
            numInvalid++;
        }
    }
    // All the fields are valid, just overwrite `out` with a cheery message
    if (numInvalid == 0)
        out = "All fields contain valid data!";

    /* Format the output as dictated by `format` */
    if (format == "HTML") {
        out = out.replace("\n", "<br>");
    } else if (format == "PLAINTEXT") {
        ;
    }

    return out;
}
validateFields(List fields, String htmlViewPath, Boolean showWarning) {
    if (showWarning) {
      String validationMessagePlain = validateFields(fields, "PLAINTEXT");
      showWarning("Validation_Results" , validationMessagePlain);
    }
    String validationMessageHtml  = validateFields(fields, "HTML");
    populateWebViewHtml(htmlViewPath , validationMessageHtml);
}

validateContextFields() {
  validateContextFields(true);
}

validateContextFields(Boolean showWarning) {
    // Context Tabgroup required fields
    List fields = new ArrayList();
    fields.add(fieldPair("Context/Context_GeneralInformation/Context_Type" , "{Context_Type}"));
    fields.add(fieldPair("Context/Context_GeneralInformation/Date_Closed"  , "{Date_Closed}"));
    fields.add(fieldPair("Context/Context_GeneralInformation/Date_Opened"  , "{Date_Opened}"));
    fields.add(fieldPair("Context/Context_GeneralInformation/Excavation_Method" , "{Excavation_Method}"));
    fields.add(fieldPair("Context/Context_GeneralInformation/Context_Comments" , "{Context_Comments}"));
    fields.add(fieldPair("Context/Context_GeneralInformation/Your_description" , "{Your_description}"));
    fields.add(fieldPair("Context/Context_GeneralInformation/Excavator" , "{Excavator}"));
    fields.add(fieldPair("Context/Context_Measure/Context_Highest_Level" , "{Context_Highest_Level}"));
    fields.add(fieldPair("Context/Context_Measure/Context_Lowest_Level" , "{Context_Lowest_Level}"));
    fields.add(fieldPair("Context/Context_Measure/Context_Highest_Level_NW" , "{Context_Highest_Level_NW}"));
    fields.add(fieldPair("Context/Context_Measure/Context_Highest_Level_NE" , "{Context_Highest_Level_NE}"));
    fields.add(fieldPair("Context/Context_Measure/Context_Highest_Level_SE" , "{Context_Highest_Level_SE}"));
    fields.add(fieldPair("Context/Context_Measure/Context_Highest_Level_SW" , "{Context_Highest_Level_SW}"));
    fields.add(fieldPair("Context/Context_Measure/Context_Highest_Level_Ctr" , "{Context_Highest_Level_Ctr}"));
    fields.add(fieldPair("Context/Context_Measure/Context_Lowest_Level_NW" , "{Context_Lowest_Level_NW}"));
    fields.add(fieldPair("Context/Context_Measure/Context_Lowest_Level_NE" , "{Context_Lowest_Level_NE}"));
    fields.add(fieldPair("Context/Context_Measure/Context_Lowest_Level_Ctr" , "{Context_Lowest_Level_Ctr}"));
    fields.add(fieldPair("Context/Context_Measure/Context_Lowest_Level_SE" , "{Context_Lowest_Level_SE}"));
    fields.add(fieldPair("Context/Context_Measure/Context_Lowest_Level_SW" , "{Context_Lowest_Level_SW}"));
    fields.add(fieldPair("Context/Context_Measure/Length" , "{Length}"));
    fields.add(fieldPair("Context/Context_Measure/Width" , "{Width}"));
    fields.add(fieldPair("Context/Context_Measure/Depth" , "{Depth}"));
    fields.add(fieldPair("Context/Context_Measure/Volume" , "{Volume}"));
    fields.add(fieldPair("Context/Context_Deposits/Soil_Colour" , "{Soil_Colour}"));
    fields.add(fieldPair("Context/Context_Cuts/Shape_of_Cut" , "{Shape_of_Cut}"));
    fields.add(fieldPair("Context/Context_Interpretation/Your_Discussion" , "{Your_Discussion}"));
    fields.add(fieldPair("Context/Context_Interpretation/Start_date" , "{Start_date}"));
    fields.add(fieldPair("Context/Context_Interpretation/End_date" , "{End_date}"));
    fields.add(fieldPair("Context/Context_Interpretation/Phase_To" , "{Phase_To}"));
    fields.add(fieldPair("Context/Context_Attachments/Photo" , "{Photo}"));
    validateFields(fields, "Context/Context_Validation/validationResults", showWarning);
}
onEvent("Context/Context_GeneralInformation/validate", "delayclick", "showTab(\"Context/Context_Validation\")");
onEvent("Context/Context_Validation", "show", "validateContextFields(false)");
onEvent("Context", "show", "validateContextFields(false)");

validateContextGroupFields() {
  validateContextGroupFields(true);
}

validateContextGroupFields(Boolean showWarning) {
    // Context Group Tabgroup required fields
    List fields = new ArrayList();
    fields.add(fieldPair("ContextGroup/ContextGroup_Details/Description" , "{Description}"));
    fields.add(fieldPair("ContextGroup/ContextGroup_Details/Length" , "{Length}"));
    fields.add(fieldPair("ContextGroup/ContextGroup_Details/Width" , "{Width}"));
    fields.add(fieldPair("ContextGroup/ContextGroup_Details/Depth" , "{Depth}"));
    fields.add(fieldPair("ContextGroup/ContextGroup_Details/Your_Discussion" , "{Your_Discussion}"));
    fields.add(fieldPair("ContextGroup/ContextGroup_Details/Start_Date" , "{Start_Date}"));
    fields.add(fieldPair("ContextGroup/ContextGroup_Details/End_Date" , "{End_Date}"));
    fields.add(fieldPair("ContextGroup/ContextGroup_Details/Phase_From" , "{Phase_From}"));
    validateFields(fields, "ContextGroup/ContextGroup_Validation/validationResults", showWarning);
}
onEvent("ContextGroup/ContextGroup_Details/validate", "delayclick", "showTab(\"ContextGroup/ContextGroup_Validation\")");
onEvent("ContextGroup/ContextGroup_Validation", "show", "validateContextGroupFields(false)");
onEvent("ContextGroup", "show", "validateContextGroupFields(false)");

validateArtefactGroup() {
  validateArtefactGroup(true);
}

validateArtefactGroupFields(Boolean showWarning) {
  // Artefact Tabgroup required fields
  List fields = new ArrayList();
  fields.add(fieldPair("Artefact_Group/Artefact_Group_GeneralInformation/Photo" , "{Photo}"));
  validateFields(fields, "Artefact_Group/Artefact_Group_Validation/validationResults", showWarning);
}
onEvent("Artefact_Group/Artefact_Group_GeneralInformation/validate", "delayclick", "showTab(\"Artefact_Group/Artefact_Group_Validation\")");
onEvent("Artefact_Group/Artefact_Group_Validation", "show", "validateArtefactGroupFields(false)");
onEvent("Artefact_Group", "show", "validateArtefactGroupFields(false)");

/*
 * If value of field specified by `ref` is null, sets the field to `defaultVal`,
 * otherwise increments its value.
 *
 * Returns the value the field was updated to.
 */
incField(String ref, Integer defaultVal) {
    String val = getFieldValue(ref);

    if (isNull(val)) {
        setFieldValue(ref, defaultVal);
        return defaultVal;
    }

    Integer inc = Integer.parseInt(val) + 1;
    setFieldValue(ref, inc);
    insertIntoLocalSettings(ref, inc.toString());

    return inc;
}

/* Increments the field at `ref` or returns null if it does not contain a
 * number.
 */
incField(String ref) {
    return incField(ref, null);
}

newContext(){
    String contextIncrement = getFieldValue("control/data/ContextIncrement");
    if (isNull(contextIncrement)) {
        showWarning("{Alert}","{No_starting_ID_is_entered_please_enter_one}");
        return;
    }

    context_id = null;
    newTabGroup("Context");

    fetchOne("REPLACE INTO localSettings(key, value) VALUES('contextIncrement', '" + contextIncrement + "');", null);
    setFieldValue("Context/Context_GeneralInformation/AreaCode", getFieldValue("user/usertab/Area_Code"));

    String gridDatumQ = "SELECT areacode || '-' || devicecode AS grid, areacode || '-' AS datum " + 
      " FROM (SELECT vocabname as areacode " +
      " FROM vocabulary, localsettings " +
      " WHERE vocabid = value " +
      " and key = 'AreaCode_VocabID'), " +
      " (SELECT vocabname as devicecode " +
      " FROM vocabulary, localsettings " +
      " WHERE vocabid = value " +
      " and key = 'DeviceCode_VocabID');";
    fetchOne(gridDatumQ, new FetchCallback() {
      onFetch(result) {
        setFieldValue("Context/Context_GeneralInformation/Grid_Location_Reference", result.get(0));
        setFieldValue("Context/Context_Measure/Datum", result.get(1));
        keepTabGroupChanges("Context");
      }
    });    

    setFieldValue("Context/Context_GeneralInformation/Site_Code", moduleSiteCode);
    setFieldValue("Context/Context_GeneralInformation/Context_ID", contextIncrement);
    setTimestamp("Context/Context_GeneralInformation/Date_Opened");

    setFieldValue("Context/Context_GeneralInformation/CreatingUser", username);
    setFieldValue("Context/Context_GeneralInformation/Excavator", username);
    setFieldValue("Context/Context_GeneralInformation/Device_Code", getFieldValue("user/usertab/Device_Code"));
    keepTabGroupChanges("Context");

    incField("control/data/ContextIncrement");
}

loadContext() {
    //TODO redo the loading
    context_id = getListItemValue();
    loadContextFrom(context_id);

    //do we need to load user from createdmodifiedatby to the creating user field?
    
}

loadContextFrom(contextid) {
    context_id = contextid;
    if (isNull(context_id)) return;
    
    showTabGroup("Context", context_id, new FetchCallback() {
      onFetch(result) {
        openContextTabs(true);
      }
    });
}

saveContext(String callback) {  
  
    Boolean enable_autosave = true;
    saveTabGroup("Context", context_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            context_id = uuid;
            execute(callback);
        }
        onError(message) {
            showToast(message);
        }
    }, enable_autosave);
}

deleteContext(){
    if (!isNull(context_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Context}", "reallyDeleteContext()", "doNotDelete()");
    } else {
        cancelTabGroup("Context", true);
    }
}

reallyDeleteContext(){
    deleteArchEnt(context_id);
    cancelTabGroup("Context", false);
}

doNotDelete(){
    showToast("{Delete_Cancelled}");
}


loadContextFromReln(){
    String childuuid = selectedEntityIdentifer;
    if (!isNull(childuuid)){
        loadEntityFrom(childuuid);
        
    } else {
        showWarning("Nothing Selected", "Please select a child entity in the list.");
    }
}

deleteReln(){
    String childuuid = selectedEntityIdentifer;
    if (!isNull(childuuid)){

        String relationshipidQuery = "select relationshipid from parentchild where parentuuid = '"+context_id+"' and childuuid = '"+childuuid+"';";
        fetchOne(relationshipidQuery, new FetchCallback() {
          onFetch(result) {
            String deletequery = "insert into aentreln (uuid, relationshipid, deleted, participatesverb, userid) SELECT uuid, relationshipid, 'true', participatesverb, '"+userid+"' FROM latestnondeletedaentreln WHERE relationshipid = '"+result.get(0)+"';";
            fetchOne(query, null);
            deleteRel(result.get(0));
            updateRelns();
          }
        });    
        
       
        
    }
}

fillInCloseDate(){
    if(getFieldValue("Context/Context_GeneralInformation/Date_Closed").equals("")){
        setTimestamp("Context/Context_GeneralInformation/Date_Closed");        
    } else {
        showToast("{To_avoid_accidents_please_clear_the_Date_Closed_field_before_updating}");
    }
}

updateContextRelationshipTargetArea() {
    setFieldValue("Context/Context_Relationships_to_Other_Contexts/Target_Area", getFieldValue("Context/Context_GeneralInformation/AreaCode"));
    populateWebViewHtml("Context/Context_Relationships_to_Other_Contexts/selectedEnt", WEB_REL_SELECTED_NONE);

}

updateContextIdentifier(){
    fetchOne("select response from latestNonDeletedArchEntFormattedIdentifiers where uuid = '"+context_id+"';", new FetchCallback() {
      onFetch(result) {
        setFieldValue("Context/Context_Relationships_to_Other_Contexts/context_id", result.get(0));
      }
    });    
}


updateContextRelationshipBasedCursorList(path, relntypename, uuid){
    String query = "" +
        "SELECT childuuid, response "+
        "  FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers on (childuuid = uuid) "+
        "  JOIN createdmodifiedatby USING (uuid) "+
        " WHERE relationshipid in (SELECT relationshipid  "+
        "                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)  "+
        "                           WHERE relntypename = '"+relntypename+"') "+
        "   AND parentuuid = "+uuid+" "+
        "   AND parentaenttypename = 'Context' "+
        " ORDER BY createdat desc " +
        " LIMIT ? OFFSET ?; ";

    populateCursorList(path, query, 25);
}

updateContextRelationshipBasedDropdown(path, relntypename, uuid){
    if (!isNull(context_id)){
        fetchAll("SELECT childuuid, response "+
                 "  FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers on (childuuid = uuid) "+
                 "  JOIN createdmodifiedatby USING (uuid) "+
                 " WHERE relationshipid in (SELECT relationshipid  "+
                 "                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)  "+
                 "                           WHERE relntypename = '"+relntypename+"') "+
                 "   AND parentuuid = "+uuid+" "+
                 "   AND parentaenttypename = 'Context' "+
                 " ORDER BY createdat desc; "+
                 "",

        new FetchCallback() {
          onFetch(result) {
            populateDropDown(path, result);

          }
        });
    }
}

updateNonContextRelationshipBasedDropdown(path, relntypename, parentaenttypename, uuid){
    if (!isNull(context_id)){
        fetchAll("SELECT childuuid, response "+
                 "  FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers on (childuuid = uuid) "+
                 "  JOIN createdmodifiedatby USING (uuid) "+
                 " WHERE relationshipid in (SELECT relationshipid  "+
                 "                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)  "+
                 "                           WHERE relntypename = '"+relntypename+"') "+
                 "   AND parentuuid = "+uuid+" "+
                 "   and parentaenttypename = '"+parentaenttypename+"' "+
                 " ORDER BY createdat desc; "+
                 "",

        new FetchCallback() {
          onFetch(result) {
            populateDropDown(path, result);
          }
        });
    }
}


updateAllContextAdobes() {
    updateContextRelationshipBasedDropdown("Context/Context_Structures/AdobeList", "ContextAdobe",context_id);
}



updateAllContextMatrices() {
    updateContextRelationshipBasedDropdown("Context/Context_Deposits/matrixList", "ContextMatrix",context_id);
}


updateAllContextGroups() {
    updateContextRelationshipBasedDropdown("Context/Context_Interpretation/ContextGroupList", "ContextContextGroup", context_id);
}

updateAllContextArtefacts(){
    updateContextRelationshipBasedCursorList("Context/Context_Artefacts/artefactGroupList", "ContextArtefactGroup", context_id);
    updateContextRelationshipBasedCursorList("Context/Context_Artefacts/specialFindList", "ContextSpecialFind", context_id);
}

updateAllContextSamples(){
    updateContextRelationshipBasedDropdown("Context/Context_Samples/sampleList", "ContextSample", context_id);
}

updateAllContextRelationships(){
   
    Object contextList = new ArrayList();
    
    String targetContextAreaCode = getFieldValue("Context/Context_Relationships_to_Other_Contexts/Target_Area");
    String targetContextID = getFieldValue("Context/Context_Relationships_to_Other_Contexts/Target_Context_ID");

    String targetContextQuery = "SELECT uuid, response "+
                                "  FROM latestnondeletedarchentformattedidentifiers "+
                                " WHERE (aenttypename='Legacy' "+
                                "    OR (aenttypename = 'Context' "+
                                "        AND ('null' = '"+targetContextAreaCode+"' "+
                                "             OR uuid IN (SELECT uuid "+
                                "                            FROM latestnondeletedaentvalue  "+
                                "                            JOIN attributekey USING (attributeid) "+
                                "                           WHERE attributename = 'AreaCode' "+
                                "                             AND vocabid = '"+targetContextAreaCode+"') "+
                                "                ) "+
                                "        )) "+
                                "   AND uuid IN (SELECT uuid "+
                                "                  FROM latestnondeletedaentvalue  "+
                                "                  JOIN attributekey USING (attributeid) "+
                                "                 WHERE attributename IN ('Context ID', 'Identifier') "+
                                "                   AND measure like '"+targetContextID+"'||'%' "+
                                "                )         "+
                                " ORDER BY CAST(response as integer); ";

    // TODO: Brian (query to populate the list of target contexts)
    if (!isNull(context_id)){

        fetchAll(
            targetContextQuery,
            new FetchCallback() {
                onFetch(result) {
                    Log.d("PAZC Module", "Fetched target contexts: " + result.toString());
                    populateDropDown("Context/Context_Relationships_to_Other_Contexts/context", result);
                }
            }
        );
    }
    else {
      showToast("{You_must_save_a_context_first}");
    }

    updateRelns();
}

updateAllContextPhotologs() {
    updateContextRelationshipBasedDropdown("Context/Context_Attachments/PhotoLogList", "ContextPhotographLog", context_id);

}

makeHierReln(){
    if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("{Error}", "{Cannot_save_record_without_id}");
        return;
    }

    if (isNull(context_id)){
        showToast("{You_must_have_saved_your_entity}");
        return;
    }
    String[] arguments = getFieldValue("Context/Context_Relationships_to_Other_Contexts/reln").split("~!~");
    String dest = getFieldValue("Context/Context_Relationships_to_Other_Contexts/context");

    String relSaveCallback = "updateRelns();";
    saveEntitiesToHierRel(arguments[0], context_id, dest, arguments[1], arguments[2], relSaveCallback);
}
String selectedEntityIdentifer = null;
selectAssociatedEntityContext() {
    selectedEntityIdentifer = getListItemValue();
    populateWebViewHtml("Context/Context_Relationships_to_Other_Contexts/selectedEnt", selectedEntityIdentifer);
}

selectAssociatedEntityContextGroup() {
    selectedEntityIdentifer = getListItemValue();
    populateWebViewHtml("ContextGroup/ContextGroup_Contexts/selectedEnt", selectedEntityIdentifer);
}

showRelnFromList(){
    listID = getListItemValue();
    //TODO figure out how to refactor this. 
    foo = fetchOne("SELECT group_concat(response, '\n') FROM ( SELECT attributename || ': ' || coalesce(vocabname, freetext) as response FROM ( SELECT uuid FROM latestnondeletedarchent JOIN latestnondeletedaentreln USING (uuid) WHERE uuid != "+context_id+" and relationshipid = "+listID+" ) JOIN latestnondeletedaentvalue USING (uuid) JOIN attributekey USING (attributeid) left outer JOIN vocabulary USING (attributeid, vocabid) WHERE attributename in ('Context ID', 'Context Type', 'Brief Description', 'Date Opened', 'Date Closed', 'Your Interpretation', 'Your description')  and coalesce(vocabname, freetext) is not null group by uuid, attributename ORDER BY  case attributename when 'Context ID' then 1 when 'Context Type' then 2 when 'Your Interpretation' then 3 when 'Your description' then 4 when 'Date Opened' then 5 when 'Date Closed' then 6 end); ");
    if (!isNull(foo)){
        showToast(foo.get(0));
    }
}

updateRelns(){
    //TODO Figure out a better way of doing this other than a dropdown.
    if (!isNull(context_id)){        
        populateCursorList(
                "Context/Context_Relationships_to_Other_Contexts/listOfRelns",
                "SELECT childuuid, parentparticipatesverb||' '||response "+
                "  FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers on (childuuid = uuid) "+
                "  JOIN createdmodifiedatby USING (uuid) "+
                " WHERE relationshipid in (SELECT relationshipid  "+
                "                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)  "+
                "                           WHERE relntypename not like 'Context%') "+
                "   and parentuuid = '"+context_id+"' "+
                "   and parentaenttypename = 'Context' "+
                " ORDER BY createdat desc "+
                " limit ? offset ? ;",
                25
        );
    } else {
        showToast("No context id!");
    }
    refreshTabgroupCSS("control");

}

loadContextAttributes(){       
    makeVocab("DropDown", "Context/Context_GeneralInformation/Type_of_Definition", "Type of Definition");
    makeVocab("DropDown", "Context/Context_GeneralInformation/Excavation_Method", "Excavation Method");
    makeVocab("PictureGallery", "Context/Context_GeneralInformation/Context_Type", "Context Type");
    makeVocab("DropDown", "Context/Context_GeneralInformation/AreaCode", "AreaCode");
    makeVocab("DropDown", "Context/Context_GeneralInformation/Device_Code", "Device Code");
    makeVocab("DropDown", "Context/Context_Deposits/Soil_Compaction_Type", "Soil Compaction Type");
    makeVocab("DropDown", "Context/Context_Deposits/Soil_Munsell_Colour", "Soil Munsell Colour");
    makeVocab("PictureGallery", "Context/Context_Deposits/Soil_Particle_Sorting", "Soil Particle Sorting");
    makeVocab("HierarchicalDropDown", "Context/Context_Deposits/Soil_Texture_Actual", "Soil Texture");
    makeVocab("DropDown", "Context/Context_Deposits/Horizon_Boundary", "Horizon Boundary");
    makeVocab("DropDown", "Context/Context_Cuts/Shape_of_Cut", "Shape of Cut");
    makeVocab("RadioGroup", "Context/Context_Cuts/Shape_of_Corners", "Shape of Corners");
    makeVocab("RadioGroup", "Context/Context_Cuts/Break_of_Slope_Top", "Break of Slope - Top");
    makeVocab("RadioGroup", "Context/Context_Cuts/Break_of_slope_Base", "Break of slope - Base");
    makeVocab("DropDown", "Context/Context_Cuts/Sides_of_Cut", "Sides of Cut");
    makeVocab("DropDown", "Context/Context_Cuts/Shape_of_Base", "Shape of Base");
    makeVocab("RadioGroup", "Context/Context_Cuts/Orientation", "Orientation");
    makeVocab("DropDown", "Context/Context_Structures/Structural_Components", "Structural Components");
    makeVocab("DropDown", "Context/Context_Structures/Bonding", "Bonding");
    makeVocab("HierarchicalPictureGallery", "Context/Context_Structures/Bond_Type", "Bond Type");
    makeVocab("RadioGroup", "Context/Context_Interpretation/Your_Interpretation", "Your Interpretation");
    makeVocab("DropDown", "Context/Context_Interpretation/Phase_From", "Phase From");
    makeVocab("DropDown", "Context/Context_Interpretation/Phase_To", "Phase To");
    makeVocab("DropDown", "Context/Context_Relationships_to_Other_Contexts/Target_Area", "AreaCode");
    //makeVocab("DropDown", "Context/Context_Interpretation/ContextGroupList", "");

    //TODO picture gallery, hierarchical, etc

    // TODO -- we need to discuss how to implement "relating contexts to each other" -- this is not a very good way to do it at all. 
    // relnList = fetchAll("SELECT relntypename||'~!~'||coalesce(nullif(parent||'~!~'||child,'~!~'),relntypename||'~!~'||relntypename) as relntypeid, coalesce(nullif(parent,''), relntypename) as name, relntypeid FROM relntype WHERE relntypename not like '%Context%' and relntypename not like '%SpecialFind%' union SELECT relntypename||'~!~'||coalesce(nullif(child||'~!~'||parent,'~!~'),relntypename||'~!~'||relntypename), coalesce(nullif(child,''), relntypename) as name, relntypeid FROM relntype WHERE relntypename not like '%Context%' and relntypename not like '%SpecialFind%' ORDER BY  relntypeid, name;");
    // populateDropDown("Context/Context_Relationships_to_Other_Contexts/reln", relnList);

    String relnListQuery = "SELECT relntypename||'~!~'||coalesce(nullif(parent||'~!~'||child,'~!~'),relntypename||'~!~'||relntypename) as relntypeid, coalesce(nullif(parent,''), relntypename) as name, relntypeid "+
                           "  FROM relntype "+
                           " WHERE relntypename not like '%Context%' "+
                           "   AND relntypename not like '%SpecialFind%' "+
                           " UNION "+
                           " SELECT relntypename||'~!~'||coalesce(nullif(child||'~!~'||parent,'~!~'),relntypename||'~!~'||relntypename), coalesce(nullif(child,''), relntypename) as name, relntypeid "+
                           "  FROM relntype "+
                           " WHERE relntypename not like '%Context%' "+
                           "   AND relntypename not like '%SpecialFind%' "+
                           " ORDER BY relntypeid, name;";

    fetchAll(
            relnListQuery,
            new FetchCallback() {
                onFetch(result) {
                    print(result);
                    populateDropDown("Context/Context_Relationships_to_Other_Contexts/reln", result);
                }
            }
        );

}

openContextTabs() {
  openContextTabs(false);
}

openContextTabs(Boolean showGeneralInformationTab){
    fetchOne("SELECT vocabName FROM vocabulary WHERE vocabid = '"+getFieldValue("Context/Context_GeneralInformation/Context_Type")+"';",

        new FetchCallback() {
          onFetch(name) {
            if (!isNull(name)){
                String vocab = name.get(0);
                if ((vocab.equals("{Deposit}")) || (vocab.equals("{Natural}"))){
                    cancelTab("Context/Context_Cuts", false);
                    cancelTab("Context/Context_Structures", false);
                    showTab("Context/Context_Deposits");
                } else if (vocab.equals("{Cut}")){
                    cancelTab("Context/Context_Deposits", false);
                    cancelTab("Context/Context_Structures", false);
                    showTab("Context/Context_Cuts");
                } else if (vocab.equals("{Structure}")){
                    cancelTab("Context/Context_Deposits", false);
                    cancelTab("Context/Context_Cuts", false);
                    showTab("Context/Context_Structures");
                }
            } else {

                cancelTab("Context/Context_Cuts", false);
                cancelTab("Context/Context_Deposits", false);
                cancelTab("Context/Context_Structures", false);
            }
            if(showGeneralInformationTab) {
              showTab("Context/Context_GeneralInformation");
            }
          }});    
}

helpSetTextureActual(){
    showTab("Context/Texture_Helper");
}

setTextureActual(){

    //This function makes the hierarchical soil texture selector write to the texture dropdown. We should discuss.
    fetchOne("SELECT vocabid FROM vocabulary JOIN attributekey USING (attributeid)WHERE attributeName = 'Soil Texture Actual'and vocabname = (SELECT vocabname"
            + " FROM vocabulary JOIN attributekey USING (attributeid) "
           + " WHERE vocabid = '"+ getFieldValue("Context/Texture_Helper/Soil_Texture") +"' "
         + " and attributeName = 'Soil Texture'); ",

        new FetchCallback() {
          onFetch(textureToSet) {
            if(!isNull(textureToSet)){
                setFieldValue("Context/Context_Deposits/Soil_Texture_Actual", textureToSet.get(0));
            }
            cancelTab("Context/Texture_Helper", false);
            showTab("Context/Context_Deposits");
            }});


}

returnToContext(){
    cancelTab("Context/Texture_Helper", false);
    showTab("Context/Context_Deposits");
}
/*
TODO: redo. figure out what queries are needed here.)
remremoveContextGroupReln() {
    context_group_id = getFieldValue("Context/Context_Interpretation/ContextGroupList");
    if(!isNull(context_id) && !isNull(context_group_id)) {
        Object obj = fetchOne("SELECT context.uuid, contextgroup.uuid, relationshipid  " +
            "FROM latestnondeletedaentreln context JOIN latestnondeletedaentreln contextgroup USING (relationshipid) " +
            "WHERE context.uuid != contextgroup.uuid " +
            "and context.uuid = " + context_id + " " +
            "and contextgroup.uuid = " + context_group_id + ";");
        String relnid = obj.get(2);
        if(!isNull(relnid)) {
            String query = "insert into aentreln (uuid, relationshipid, deleted, participatesverb, userid) SELECT uuid, relationshipid, 'true', participatesverb, '" + userid + "' FROM latestnondeletedaentreln WHERE relationshipid = '" + relnid + "';";
            fetchOne(query);
            deleteRel(relnid);
            updateAllContextGroups();
        }
        
    }
}
*/

/*** ArchEnt: Context Group***/
onEvent("ContextGroup", "show", "addNavigationButtons(\"ContextGroup\"); keepTabGroupChanges(\"ContextGroup\"); saveContextGroup();");
onEvent("ContextGroup/ContextGroup_Contexts", "show", "populateContextGroupContextsArea();populateContextGroupRelatedContexts();");
onEvent("ContextGroup/ContextGroup_Contexts/Populate_Target_Context", "delayclick", "populateWebViewHtml(\"ContextGroup/ContextGroup_Contexts/selectedEnt\", WEB_REL_SELECTED_NONE); populateContextGroup();");
onEvent("ContextGroup/ContextGroup_Contexts/AddContext"    , "delayclick" , "addToContextGroup()");
onEvent("ContextGroup/ContextGroup_Contexts/ShowContext"   , "click" , "loadContextFromContextGroup()");
onEvent("ContextGroup/ContextGroup_Contexts/RemoveContext" , "click" , "removeFromContextGroup()");
onEvent("ContextGroup/ContextGroup_Contexts/ContextList" , "click" , "selectAssociatedEntityContextGroup()");
makeVocab("DropDown", "ContextGroup/ContextGroup_Contexts/Target_Area", "AreaCode");
makeVocab("DropDown", "ContextGroup/ContextGroup_Details/Phase_From", "Phase From");
makeVocab("DropDown", "ContextGroup/ContextGroup_Details/Phase_To"  , "Phase To");

String context_group_id = null;

newContextGroup(menu){
    if (!menu && isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("{Error}", "{Cannot_save_record_without_id}");
        return;
    }
    newTabGroup("ContextGroup");
    context_group_id = null;
    setFieldValue("ContextGroup/ContextGroup_Details/Site_Code", moduleSiteCode);
    setFieldValue("ContextGroup/ContextGroup_Details/Area_Code", getFieldValue("user/usertab/Area_Code"));
    setFieldValue("ContextGroup/ContextGroup_Details/Device_Code", getFieldValue("user/usertab/Device_Code"));
}

loadContextGroup(){
    context_group_id = getListItemValue();
    loadContextGroupFrom(context_group_id);
}

loadContextGroupFrom(String id){
  context_group_id = id;
    showTabGroup("ContextGroup", context_group_id);
    populateContextGroup();
}

loadContextGroupFromContext() {
    context_group_id = getFieldValue("Context/Context_Interpretation/ContextGroupList");
    if (isNull(context_group_id)) return;
    showTabGroup("ContextGroup", context_group_id);
    populateContextGroup();
}

saveContextGroup(){
    Boolean enable_autosave = true;
    saveTabGroup("ContextGroup", context_group_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            context_group_id = uuid;
            if (newRecord) {
              onContextGroupSaved();
            }
            populateContextGroup();
        }
        onError(message) {
            showToast(message);
        }
    }, enable_autosave);
}

onContextGroupSaved(){
    if(!isNull(context_id)) {
        saveEntitiesToRel("ContextContextGroup", context_id, context_group_id);
    }
}

populateContextGroupContextsArea() {
    String contextgroupAreaCode = getFieldValue("ContextGroup/ContextGroup_Details/Area_Code");
    if (!isNull(contextgroupAreaCode)) {
      setFieldValue("ContextGroup/ContextGroup_Contexts/Target_Area", contextgroupAreaCode);
    }
    populateWebViewHtml("ContextGroup/ContextGroup_Contexts/selectedEnt", WEB_REL_SELECTED_NONE);
    selectedEntityIdentifer = null;
}

populateContextGroupRelatedContexts(){
    String contextGroupQuery="SELECT childuuid, response "+
                            "  FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers on (childuuid = uuid) "+
                            "  JOIN createdmodifiedatby USING (uuid) "+
                            " WHERE relationshipid in (SELECT relationshipid  "+
                             "                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)  "+
                             "                           WHERE relntypename = 'ContextContextGroup') "+
                            "   and parentuuid = '"+context_group_id+"' "+
                            "   and parentaenttypename = 'Context Group' "+
                            " ORDER BY CAST(response as integer) "+
                            " limit ? offset ? ;";
    populateCursorList(
                "ContextGroup/ContextGroup_Contexts/ContextList",
                contextGroupQuery,
                25
        );

    Log.d("foo", contextGroupQuery);

}
addToContextGroup() {
    if (isNull(context_group_id)) {
        saveContextGroup();
        showToast("{You_must_have_saved_your_entity}");
        return;
    }
    String selectedContextID = getFieldValue("ContextGroup/ContextGroup_Contexts/AddContextList");
    if (isNull(selectedContextID)) {
      return;
    }
    String relSaveCallback = "populateContextGroup();populateContextGroupRelatedContexts();";
    saveEntitiesToRel("ContextContextGroup", selectedContextID, context_group_id, relSaveCallback);    
}

populateContextGroup() {
  // TODO Brian: query to list avaliable contexts to add to the group based on search criteria, and query to list contexts in current group

    String targetContextID = getFieldValue("ContextGroup/ContextGroup_Contexts/Target_Context_ID");
    String targetContextAreaCode = getFieldValue("ContextGroup/ContextGroup_Contexts/Target_Area");

    String targetContextQuery = "SELECT uuid, response "+
                                    "  FROM latestnondeletedarchentformattedidentifiers "+
                                    " WHERE (aenttypename='Legacy' "+
                                    "    OR (aenttypename = 'Context' "+
                                    "        AND ('null' = '"+targetContextAreaCode+"' "+
                                    "             OR uuid IN (SELECT uuid "+
                                    "                            FROM latestnondeletedaentvalue  "+
                                    "                            JOIN attributekey USING (attributeid) "+
                                    "                           WHERE attributename = 'AreaCode' "+
                                    "                             AND vocabid = '"+targetContextAreaCode+"') "+
                                    "                ) "+
                                    "        )) "+
                                    "   AND uuid IN (SELECT uuid "+
                                    "                  FROM latestnondeletedaentvalue  "+
                                    "                  JOIN attributekey USING (attributeid) "+
                                    "                 WHERE attributename IN ('Context ID', 'Identifier') "+
                                    "                   AND measure like '"+targetContextID+"'||'%' "+
                                    "                )         "+
                                    " ORDER BY CAST(response as integer); ";

       //updateNonContextRelationshipBasedDropdown("ContextGroup/ContextGroup_Contexts/AddContextList", 'ContextContextGroup', 'ContextGroup', context_group_id);
//     //TODO: Discuss how to turn these into cursor lists. I don't think this scales well.

        fetchAll(
            targetContextQuery,
            new FetchCallback() {
                onFetch(result) {
                    print(result);
                    populateDropDown("ContextGroup/ContextGroup_Contexts/AddContextList", result);
                }
            }
        );
}

loadContextGroupAttributes(){
    makeVocab("PictureGallery", "ContextGroup/ContextGroup_Details/Context_Type", "CG Context Type");
    makeVocab("DropDown", "ContextGroup/ContextGroup_Details/Phase_From", "CG Phase From");
    makeVocab("DropDown", "ContextGroup/ContextGroup_Details/Phase_To", "CG Phase To");
    makeVocab("DropDown", "ContextGroup/ContextGroup_Details/Device_Code", "Device Code");
    makeVocab("DropDown", "ContextGroup/ContextGroup_Details/Area_Code", "AreaCode");
}

loadContextFromContextGroup(){
    loadContextFrom(getFieldValue("ContextGroup/ContextGroup_Contexts/ContextList"));
}

deleteContextGroup(){
    if (!isNull(context_group_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Context_Group}", "reallyDeleteContextGroup()", "doNotDelete()");
    }
}           

reallyDeleteContextGroup(){
    deleteArchEnt(context_group_id);
    cancelTabGroup("ContextGroup", false);
}

doNotDelete(){
    showToast("{Delete_Cancelled}");
}

// TODO: Redo.
removeFromContextGroup() {
    showToast("TODO: Redo the removeFromContextGroup() function");
    // context_id = getFieldValue("ContextGroup/ContextGroup_Contexts/ContextList");
    // if(!isNull(context_id) && !isNull(context_group_id)) {
    //     Object obj = fetchOne("SELECT context.uuid, contextgroup.uuid, relationshipid  " +
    //         "FROM latestnondeletedaentreln context JOIN latestnondeletedaentreln contextgroup USING (relationshipid) " +
    //         "WHERE context.uuid != contextgroup.uuid " +
    //         "and context.uuid = " + context_id + " " +
    //         "and contextgroup.uuid = " + context_group_id + ";");
    //     String relnid = obj.get(2);
    //     if(!isNull(relnid)) {
    //         String query = "insert into aentreln (uuid, relationshipid, deleted, participatesverb, userid) SELECT uuid, relationshipid, 'true', participatesverb, '" + userid + "' FROM latestnondeletedaentreln WHERE relationshipid = '" + relnid + "';";
    //         fetchOne(query);
    //         deleteRel(relnid);
    //         populateContextGroup();
    //     }
        
    // }
}


/*** Artefact Group ***/
onEvent("Artefact_Group", "show", "addNavigationButtons(\"Artefact_Group\"); keepTabGroupChanges(\"Artefact_Group\"); saveArtefactGroup(\"\");");
onEvent("Artefact_Group/Artefact_Group_GeneralInformation/attachPhoto", "click", "attachPictureTo(\"Artefact_Group/Artefact_Group_GeneralInformation/Photo\")");
onEvent("Artefact_Group/Artefact_Group_GeneralInformation/attachSketch", "click", "attachFileTo(\"Artefact_Group/Artefact_Group_GeneralInformation/Sketch\")");
onEvent("Artefact_Group/Artefact_Group_GeneralInformation/viewattached", "click", "viewArchEntAttachedFiles(artefact_group_id)");

String artefact_group_id = null;

newArtefactGroup(){
    if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("{Error}", "{Cannot_save_record_without_id}");
        return;
    }
    if (isNull(context_id)){
        showToast("{You_must_save_a_context_first}");
        return;
    }
    artefact_group_id = null;
    newTabGroup("Artefact_Group");
    setFieldValue("Artefact_Group/Artefact_Group_GeneralInformation/Context_ID", getFieldValue("Context/Context_GeneralInformation/Context_ID"));
    setFieldValue("Artefact_Group/Artefact_Group_GeneralInformation/Site_Code", getFieldValue("Context/Context_GeneralInformation/Site_Code"));
    setFieldValue("Artefact_Group/Artefact_Group_GeneralInformation/Device_Code", getFieldValue("user/usertab/Device_Code"));
    setFieldValue("Artefact_Group/Artefact_Group_GeneralInformation/Artefact_Group_ID", getFieldValue("control/data/Artefact_Group_Starting_ID"));
    incField("control/data/Artefact_Group_Starting_ID", 1);
}

loadArtefactGroup() {
    artefact_group_id = getListItemValue();
    loadArtefactGroupFrom(artefact_group_id);
}

loadArtefactGroupFrom(String id) {
    artefact_group_id = id;
    if (isNull(artefact_group_id)) return;
    loadArtefactGroupAttributes();
    showTabGroup("Artefact_Group", artefact_group_id);
}

saveArtefactGroup(String callback) {
    Boolean enable_autosave = true;
    List attributes = createAttributeList();
    attributes.add(createEntityAttribute("AreaCode", null, getFieldValue("Context/Context_GeneralInformation/AreaCode"), null, null));
    saveTabGroup("Artefact_Group", artefact_group_id, null, attributes, new SaveCallback() {
        onSave(uuid, newRecord) {
            artefact_group_id = uuid;
            if (newRecord) {
              onArtefactGroupSaved();
            }            
            execute(callback);
        }
        onError(message) {
            showToast(message);
        }
    }, enable_autosave);
}

onArtefactGroupSaved(){
    saveEntitiesToRel("ContextArtefactGroup", context_id, artefact_group_id);
    showToast("{Associated_with_Context}");
}

deleteArtefactGroupFromContext(){
    artefact_group_id = getFieldValue("Context/Context_Artefacts/artefactGroupList");
    if (!isNull(artefact_group_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Artefact_Group}", "reallyDeleteArtefactGroup()", "doNotDelete()");
    }
}

deleteArtefactGroup(){
    if (!isNull(artefact_group_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Artefact_Group}", "reallyDeleteArtefactGroup()", "doNotDelete()");
    } else {
        cancelTabGroup("Artefact_Group", true);
    }
}

reallyDeleteArtefactGroup(){
    deleteArchEnt(artefact_group_id);
    showTabGroup("Artefact_Group");
    cancelTabGroup("Artefact_Group", false);
}

doNotDelete(){
    showToast("{Delete_Cancelled}");
}

loadArtefactGroupAttributes(){
    makeVocab("HierarchicalDropDown", "Artefact_Group/Artefact_Group_GeneralInformation/Artefact_Class", "Artefact Class");
    makeVocab("DropDown", "Artefact_Group/Artefact_Group_GeneralInformation/Device_Code", "Device Code");
}


/*** Sample ***/
onEvent("Sample", "show", "addNavigationButtons(\"Sample\"); keepTabGroupChanges(\"Sample\"); saveSample(\"\");");
onEvent("Sample/Sample_GeneralInformation/attachPhoto", "click", "attachPictureTo(\"Sample/Sample_GeneralInformation/Photo\")");
onEvent("Sample/Sample_GeneralInformation/attachSketch", "click", "attachFileTo(\"Sample/Sample_GeneralInformation/Sketch\")");
onEvent("Sample/Sample_GeneralInformation/viewattached", "click", "viewArchEntAttachedFiles(sample_id)");

String sample_id = null;

newSample(){
    if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("{Error}", "{Cannot_save_record_without_id}");
        return;
    }
    if (isNull(context_id)){
        showToast("{You_must_save_a_context_first}");
        return;
    }
    sample_id = null;
    newTabGroup("Sample");
    setFieldValue("Sample/Sample_GeneralInformation/Context_ID", getFieldValue("Context/Context_GeneralInformation/Context_ID"));
    setFieldValue("Sample/Sample_GeneralInformation/Site_Code", getFieldValue("Context/Context_GeneralInformation/Site_Code"));
    setFieldValue("Sample/Sample_GeneralInformation/Device_Code", getFieldValue("user/usertab/Device_Code"));
    setFieldValue("Sample/Sample_GeneralInformation/Sample_ID", getFieldValue("control/data/Sample_Starting_ID"));
    incField("control/data/Sample_Starting_ID", 1);
}

loadSample() {
    sample_id = getFieldValue("Context/Context_Samples/sampleList");
    loadSampleFrom(sample_id);
}

loadSampleFrom(String id) {
    sample_id = id;
    if (isNull(sample_id)) return;
    loadSampleAttributes();
    showTabGroup("Sample", sample_id);
}

saveSample(String callback) {
    Boolean enable_autosave = true;
    List attributes = createAttributeList();
    attributes.add(createEntityAttribute("AreaCode", null, getFieldValue("Context/Context_GeneralInformation/AreaCode"), null, null));
    saveTabGroup("Sample", sample_id, null, attributes, new SaveCallback() {
        onSave(uuid, newRecord) {
            sample_id = uuid;
            if (newRecord) {
              onSampleSaved();
            }
            execute(callback);
        }
        onError(message) {
            showToast(message);
        }
    }, enable_autosave);
}

onSampleSaved(){
    saveEntitiesToRel("ContextSample", context_id, sample_id);
    showToast("{Associated_with_Context}");

}

deleteSampleFromContext(){
    sample_id = getFieldValue("Context/Context_Samples/sampleList");
    if (!isNull(sample_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Sample}", "reallyDeleteSample()", "doNotDelete()");
    }
}

deleteSample(){
    if (!isNull(sample_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Sample}", "reallyDeleteSample()", "doNotDelete()");
    } else {
        cancelTabGroup("Sample", true);
    }
}

reallyDeleteSample(){
    deleteArchEnt(sample_id);
    showTabGroup("Sample");
    cancelTabGroup("Sample", false);
}

doNotDelete(){
    showToast("{Delete_Cancelled}");
}

loadSampleAttributes(){
    makeVocab("DropDown", "Sample/Sample_GeneralInformation/Sample_Type", "Sample Type");
    makeVocab("DropDown", "Sample/Sample_GeneralInformation/Collection_Method", "Collection Method");
    makeVocab("DropDown", "Sample/Sample_GeneralInformation/Device_Code", "Device Code");
}


/*** Matrix ***/
onEvent("Matrix", "show", "keepTabGroupChanges(\"Matrix\"); saveMatrix(\"\");");

String matrix_id = null;

newMatrix(){
    if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("{Error}", "{Cannot_save_record_without_id}");
        return;
    }
    if (isNull(context_id)){
        showToast("{You_must_save_a_context_first}");
        return;
    }
    matrix_id = null;
    newTabGroup("Matrix");
}

loadMatrix() {
    matrix_id = getFieldValue("Context/Context_Deposits/matrixList");
    loadMatrixFrom(matrix_id);
}

loadMatrixFrom(String id) {
    matrix_id = id;
    if (isNull(matrix_id)) return;
    loadMatrixAttributes();
    showTabGroup("Matrix", matrix_id);
}

saveMatrix(String callback) {
    Boolean enable_autosave = true;
    List attributes = createAttributeList();
    attributes.add(createEntityAttribute("AreaCode", null, getFieldValue("Context/Context_GeneralInformation/AreaCode"), null, null));
    saveTabGroup("Matrix", matrix_id, null, attributes, new SaveCallback() {
        onSave(uuid, newRecord) {
            matrix_id = uuid;
            if (newRecord) {
              onMatrixSaved();
            }
            execute(callback);
        }
        onError(message) {
            showToast(message);
        }
    }, enable_autosave);
}

onMatrixSaved(){
    saveEntitiesToRel("ContextMatrix", context_id, matrix_id);
    showToast("{Associated_with_Context}");

}

deleteMatrixFromContext(){
    matrix_id = getFieldValue("Context/Context_Deposits/matrixList");
    if (!isNull(matrix_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Matrix}", "reallyDeleteMatrix()", "doNotDelete()");
    }
}

deleteMatrix(){
    if (!isNull(matrix_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Matrix}", "reallyDeleteMatrix()", "doNotDelete()");
    } else {
        cancelTabGroup("Matrix", true);
    }
}

reallyDeleteMatrix(){
    deleteArchEnt(matrix_id);
    showTabGroup("Matrix");
    cancelTabGroup("Matrix", false);
}

doNotDelete(){
    showToast("{Delete_Cancelled}");
}

loadMatrixAttributes(){
    makeVocab("DropDown", "Matrix/Matrix/Component_Type", "Component Type");
    makeVocab("DropDown", "Matrix/Matrix/Component", "Component");
    makeVocab("HierarchicalPictureGallery", "Matrix/Matrix/Shape", "Shape");
}

/*** Special Find ***/
onEvent("Special_Find", "show", "addNavigationButtons(\"Special_Find\"); keepTabGroupChanges(\"Special_Find\"); saveSpecialFind(\"\");");
onEvent("Special_Find/Special_Find_GeneralInformation/attachPhoto", "click", "attachPictureTo(\"Special_Find/Special_Find_GeneralInformation/Photo\")");
onEvent("Special_Find/Special_Find_GeneralInformation/TakeGPS", "click", "takeFromGPS()");

String special_find_id = null;

newSpecialFind(){
    if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("{Error}", "{Cannot_save_record_without_id}");
        return;
    }
    if (isNull(context_id)){
        showToast("{You_must_save_a_context_first}");
        return;
    }
    special_find_id = null;
    newTabGroup("Special_Find");
    setFieldValue("Special_Find/Special_Find_GeneralInformation/Context_ID", getFieldValue("Context/Context_GeneralInformation/Context_ID"));
    setFieldValue("Special_Find/Special_Find_GeneralInformation/Site_Code", getFieldValue("Context/Context_GeneralInformation/Site_Code"));
    setFieldValue("Special_Find/Special_Find_GeneralInformation/Device_Code", getFieldValue("user/usertab/Device_Code"));
    setFieldValue("Special_Find/Special_Find_GeneralInformation/Special_Find_ID", getFieldValue("control/data/SpecialFind_Starting_ID"));
    incField("control/data/SpecialFind_Starting_ID", 1);
}

loadSpecialFind() {
    special_find_id = getListItemValue();
    loadSpecialFindFrom(special_find_id);
}

loadSpecialFindFrom(String id) {
    special_find_id = id;
    if (isNull(special_find_id)) return;
    loadSpecialFindAttributes();
    showTabGroup("Special_Find", special_find_id);
}

saveSpecialFind(String callback) {
    Boolean enable_autosave = true;
    List attributes = createAttributeList();
    attributes.add(createEntityAttribute("AreaCode", null, getFieldValue("Context/Context_GeneralInformation/AreaCode"), null, null));
    saveTabGroup("Special_Find", special_find_id, null, attributes, new SaveCallback() {
        onSave(uuid, newRecord) {
            special_find_id = uuid;
            if (newRecord) {
              onSpecialFindSaved();
            }
            execute(callback);
        }
        onError(message) {
            showToast(message);
        }
    }, enable_autosave);
}

onSpecialFindSaved(){
    saveEntitiesToRel("ContextSpecialFind", context_id, special_find_id);
    showToast("{Associated_with_Context}");
}

deleteSpecialFindFromContext(){
    special_find_id = getFieldValue("Context/Context_Artefacts/specialFindList");
    if (!isNull(special_find_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Special_Find}", "reallyDeleteSpecialFind()", "doNotDelete()");
    }
}

deleteSpecialFind(){
    if (!isNull(special_find_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Special_Find}", "reallyDeleteSpecialFind()", "doNotDelete()");
    } else {
        cancelTabGroup("Special_Find", true);
    }
}

reallyDeleteSpecialFind(){
    deleteArchEnt(special_find_id);
    showTabGroup("Special_Find");
    cancelTabGroup("Special_Find", false);
}

doNotDelete(){
    showToast("{Delete_Cancelled}");
}

loadSpecialFindAttributes(){
    makeVocab("HierarchicalDropDown", "Special_Find/Special_Find_GeneralInformation/Special_Find_Class", "Special Find Class");
    makeVocab("DropDown", "Special_Find/Special_Find_GeneralInformation/Device_Code", "Device Code");
}

takeFromGPS(){
  Object position = getGPSPosition();
  Object projPosition = getGPSPositionProjected();
  if (projPosition != null ){
    Double latitude = position.getLatitude();
    Double longitude = position.getLongitude();
    Double northing = projPosition.getLatitude();
    Double easting = projPosition.getLongitude();
    setFieldValue("Special_Find/Special_Find_GeneralInformation/Latitude", latitude);
    setFieldValue("Special_Find/Special_Find_GeneralInformation/Longitude", longitude);
    setFieldValue("Special_Find/Special_Find_GeneralInformation/Northing", northing);
    setFieldValue("Special_Find/Special_Find_GeneralInformation/Easting", easting);
  } else {
    showToast("{GPS_Not_initialized}");
  }
}

/*** Arch Ent: Adobe Element ***/
onEvent("Adobe_Element", "show", "addNavigationButtons(\"Adobe_Element\"); keepTabGroupChanges(\"Adobe_Element\"); saveAdobe(\"\");");
onEvent("Adobe_Element/Adobe_Element/ReturnToContext", "delayclick", "cancelTabGroup(\"Adobe_Element\", true)");

String adobe_id = null;

newAdobe(){
    if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("{Error}", "{Cannot_save_record_without_id}");
        return;
    }
    if (isNull(context_id)){
        showToast("{You_must_save_a_context_first}");
        return;
    }
    adobe_id = null;
    newTabGroup("Adobe_Element");
    setFieldValue("Adobe_Element/Adobe_Element/Context_ID", getFieldValue("Context/Context_GeneralInformation/Context_ID"));
    setFieldValue("Adobe_Element/Adobe_Element/Site_Code", getFieldValue("Context/Context_GeneralInformation/Site_Code"));
    setFieldValue("Adobe_Element/Adobe_Element/Device_Code", getFieldValue("user/usertab/Device_Code"));
    setFieldValue("Adobe_Element/Adobe_Element/Adobe_Element_ID", getFieldValue("control/data/Adobe_Element_Starting_ID"));
    incField("control/data/Adobe_Element_Starting_ID", 1);
}

loadAdobe() {
    adobe_id = getFieldValue("Context/Context_Structures/AdobeList");
    loadAdobeFrom(adobe_id);
}

loadAdobeFrom(String id) {
    adobe_id = id;
    if (isNull(adobe_id)) return;
    showTabGroup("Adobe_Element", adobe_id);
}

loadAdobeAttributes(){
    makeVocab("DropDown", "Adobe_Element/Adobe_Element/Method_Manufacture", "Method_Manufacture");
    makeVocab("DropDown", "Adobe_Element/Adobe_Element/Shape", "AdobeShape");
    makeVocab("DropDown", "Adobe_Element/Adobe_Element/Device_Code", "Device Code");
}

saveAdobe(String callback) {
    if (isNull(context_id)) {
        showWarning("{Error}", "{Adobe_cannot_be_saved_as_parent_context_is_not_saved_or_loaded}");
        return null;
    }

    Boolean enable_autosave = true;
    List attributes = createAttributeList();
    attributes.add(createEntityAttribute("AreaCode", null, getFieldValue("Context/Context_GeneralInformation/AreaCode"), null, null));
    saveTabGroup("Adobe_Element", adobe_id, null, attributes, new SaveCallback() {
        onSave(uuid, newRecord) {
            adobe_id = uuid;
            if (newRecord) {
              onAdobeSaved();
            }
            execute(callback);
        }
        onError(message) {
            showToast(message);
        }
    }, enable_autosave);
}

onAdobeSaved(){
    saveEntitiesToRel("ContextAdobe", context_id, adobe_id);
    showToast("{Associated_with_Context}");

}

deleteAdobeFromContext(){
    adobe_id = getFieldValue("Context/Context_Structures/AdobeList");
    if (!isNull(adobe_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Photograph_Log}", "reallyDeleteAdobe()", "doNotDelete()");
    }
}

deleteAdobe(){
    if (!isNull(adobe_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Adobe}!", "reallyDeleteAdobe()", "doNotDelete()");
    } else {
        cancelTabGroup("Adobe_Element", true);
    }
}

reallyDeleteAdobe(){
    deleteArchEnt(adobe_id);
    showTabGroup("Adobe_Element");
    cancelTabGroup("Adobe_Element", false);
}

doNotDelete(){
    showToast("{Delete_Cancelled}");
}

/*** Arch Ent: PhotoLog ***/
onEvent("Photograph_Log", "show", "addNavigationButtons(\"Photograph_Log\"); keepTabGroupChanges(\"Photograph_Log\"); savePhotoLog(\"\");");
onEvent("Photograph_Log/Photograph_Log/ReturnToContext", "delayclick", "cancelTabGroup(\"Photograph_Log\", true)");

String photolog_id = null;

newPhotoLog(){
    if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("{Error}", "{Cannot_save_record_without_id}");
        return;
    }
    if (isNull(context_id)){
        showToast("{You_must_save_a_context_first}");
        return;
    }
    photolog_id = null;
    newTabGroup("Photograph_Log");
    setFieldValue("Photograph_Log/Photograph_Log/Context_ID", getFieldValue("Context/Context_GeneralInformation/Context_ID"));
    setFieldValue("Photograph_Log/Photograph_Log/Site_Code", getFieldValue("Context/Context_GeneralInformation/Site_Code"));
    setFieldValue("Photograph_Log/Photograph_Log/Device_Code", getFieldValue("user/usertab/Device_Code"));
}

loadPhotoLog() {
    photolog_id = getFieldValue("Context/Context_Attachments/PhotoLogList");
    loadPhotoLogFrom(photolog_id);
}

loadPhotoLogFrom(String id) {
    photolog_id = id;
    if (isNull(photolog_id)) return;
    showTabGroup("Photograph_Log", photolog_id);
}

loadPhotoLogAttributes(){
    makeVocab("DropDown", "Photograph_Log/Photograph_Log/Camera", "Camera");
    makeVocab("DropDown", "Photograph_Log/Photograph_Log/Device_Code", "Device Code");
}

savePhotoLog(String callback) {
    Boolean enable_autosave = true;
    List attributes = createAttributeList();
    attributes.add(createEntityAttribute("AreaCode", null, getFieldValue("Context/Context_GeneralInformation/AreaCode"), null, null));
    saveTabGroup("Photograph_Log", photolog_id, null, attributes, new SaveCallback() {
        onSave(uuid, newRecord) {
            photolog_id = uuid;
            if (newRecord) {
              onPhotoLogSaved();
            }            
            execute(callback);
        }
        onError(message) {
            showToast(message);
        }
    }, enable_autosave);
}

onPhotoLogSaved(){
    saveEntitiesToRel("ContextPhotographLog", context_id, photolog_id);
    showToast("{Associated_with_Context}");

}

deletePhotoLogFromContext(){
    photolog_id = getFieldValue("Context/Context_Attachments/PhotoLogList");
    if (!isNull(photolog_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Photograph_Log}", "reallyDeletePhotoLog()", "doNotDelete()");
    }
}

deletePhotoLog(){
    if (!isNull(photolog_id)) {
        showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Photograph_Log}", "reallyDeletePhotoLog()", "doNotDelete()");
    } else {
        cancelTabGroup("Photograph_Log", true);
    }
}

reallyDeletePhotoLog(){
    deleteArchEnt(photolog_id);
    showTabGroup("Photograph_Log");
    cancelTabGroup("Photograph_Log", false);
}

doNotDelete(){
    showToast("{Delete_Cancelled}");
}



// Stuff that needs to happen after everything.

loadContextAttributes();
loadContextGroupAttributes();
loadArtefactGroupAttributes();
loadSampleAttributes();
loadMatrixAttributes();
loadSpecialFindAttributes();
loadPhotoLogAttributes();
loadAdobeAttributes();
