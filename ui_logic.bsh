/*** 'Editable' - you can edit the code below based on the needs ***/
User user; // don't touch
String userid;

import java.util.concurrent.Callable;
import android.util.Log;
import java.io.File;
import jsqlite;
import jsqlite.Callback;

Log.d("PAZC Module", "Very first line of logic after imports.");

makeLocalID(){
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);", null);
    fetchOne("drop view if exists parentchild;", null);
    fetchOne( "create view parentchild as "+
            "  select parent.uuid as parentuuid, child.uuid as childuuid, parent.participatesverb, parent.relationshipid, parent.aenttypename as parentaenttypename"+
            "    from (select uuid, participatesverb, aenttypename, relationshipid"+
            "            from latestnondeletedaentreln "+
            "            join relationship using (relationshipid) "+
            "            join latestnondeletedarchent using (uuid) "+
            "            join aenttype using (aenttypeid)) parent "+
            "    join (select uuid, relationshipid "+
            "            from latestnondeletedaentreln "+
            "            join relationship using (relationshipid)) child "+
            "      on (parent.relationshipid = child.relationshipid and parent.uuid != child.uuid);", null);

}

/*

select childuuid, response
  from parentchild join latestnondeletedaentformattedidentifier on (childuuid = uuid) join createdmodifiedatby using (uuid)
 where relationshipid in (select relationshipid 
                            from latestnondeletedrelationship join relntype using (relntypeid) 
                           where relntypename = 'ContextSample')
   and parentaenttypename = 'Context'
 order by createdat desc;

*/

makeLocalID();

/** Vocab Population -- copied from lake mungo.**/
/** Wrapper for to make a vocab without an exlusion list **/
makeVocab(String type, String path, String attrib) {
  makeVocab(type, path, attrib, null);
}

/*** 'Editable' - you can edit the code below based on the needs ***/
/** Vocab Population **/
/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (PictureGallery, CheckBoxGroup, DropDown, HierarchicalDropDown, RadioGroup or List). */
makeVocab(String type, String path, String attrib, List vocabExclusions) {
    makeVocab(type, path, attrib, vocabExclusions, null);
}

/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (PictureGallery, CheckBoxGroup, DropDown, HierarchicalDropDown, RadioGroup or List). */
makeVocab(String type, String path, String attrib, List vocabExclusions, String callbackFunction){
  if (isNull(type) || isNull(path) || isNull(attrib)) {
    Log.e("makeVocab()", "Can't make populate a vocab when the given type, path or attribute is Null");
    return;
  }

  if (type.equals("PictureGallery")) {
    fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabcountorder;", new FetchCallback() {
      onFetch(pictures) {
        populatePictureGallery(path, pictures);
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
    return;
  }

  if (type.equals("HierarchicalDropDown")) {
    // populateHierarchicalDropDown(path, attrib);
    populateHierarchicalDropDown(path, attrib, true);
    if (callbackFunction != null && !isNull(callbackFunction)) {
      execute(callbackFunction);
    }
    return;
  }

  fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabcountorder;",
    new FetchCallback() {
      onFetch(result) {
        // print("makeVocab() result: " + result);
        if (result!=null && result.size()>0 && vocabExclusions!=null && vocabExclusions.size()>0) {
          List filteredVocab = new ArrayList();
          for(item : result) {
            if (vocabExclusions.contains(item.get(1))) {
              Log.d("makeVocab()", "removing vocab exclusion: " + item.get(1));
            } else {
              filteredVocab.add(item);
            }
          }
          result=filteredVocab;
        }
        // print("makeVocab() filtered result: " + result);
        if(type.equals("CheckBoxGroup")) {
          populateCheckBoxGroup(path, result);
        } else if(type.equals("DropDown")) {
          // populateDropDown(path, result);
          populateDropDown(path, result, true);
        } else if(type.equals("RadioGroup")) {
          populateRadioGroup(path, result);
        } else if(type.equals("List")) {
          populateList(path, result);
        }
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
}

/** Entity Relationship Saving **/
/** Saves two entity id's as a relation. **/
saveEntitiesToRel(String type, String entity1, String entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
        }
    });
}

/** Saves two entity id's as a relation with some callback executed. **/
saveEntitiesToRel(String type, String entity1, String entity2, String callback) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
            if(!isNull(callback)) {
               execute(callback);
            }
        }
    });
}

/** Saves two entity id's as a hierachical relation. **/
saveEntitiesToHierRel(String type, String entity1, String entity2, String e1verb, String e2verb) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, e1verb);
            addReln(entity2, rel_id, e2verb);
        }
    });
}

/** Action Bar **/
addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Disable_Sync}";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("{Sync_Disabled}");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "{Enable_Sync}";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("{Sync_Enabled}");
    }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Disable_Internal_GPS}";
    }
    actionOn() {
        stopGPS();
        showToast("{Internal_GPS_Disabled}");
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "{Enable_Internal_GPS}";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("{Internal_GPS_Enabled}");
    }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Disable_External_GPS}";
    }
    actionOn() {
        stopGPS();
        if (isBluetoothConnected()) {
          showToast("{External_GPS_Disabled}");
        } else {
          showToast("{Please_Enable_Bluetooth}");
        }
    }
    isActionOff() {
        isExternalGPSOn();
    }
    actionOffLabel() {
        "{Enable_External_GPS}";
    }
    actionOff() {
        if(isInternalGPSOn()) {
            stopGPS();
        }
        startExternalGPS();
        if(isBluetoothConnected()) {
            showToast("{External_GPS_Enabled}");
        } else {
            showToast("{Please_Enable_Bluetooth}");
            this.actionOn();
        }
    }
});

setTimestamp(String path) {
    setFieldValue(path, new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss z").format(new Date()));
}


loadFromLocalSettings(String key, String defaultVal) {
    query = "SELECT value FROM localSettings WHERE key = '" + key + "';";
    fetchOne(query, new FetchCallback() {
        onFetch(result) {
            print("" + result);
            String value = defaultVal;
            if (!isNull(result)) {
                value = result.get(0);
            }

            setFieldValue("Project/Main/" + key, value);
        }
    });
}

/* Removes sidebar navigation buttons */
removeNavigationButtons() {
  // removeNavigationButton("new");
  // removeNavigationButton("duplicate");
  // removeNavigationButton("delete");
}

addNaviationButtons(String tabgroup) {
  removeNavigationButtons();
  addNavigationButton("new", new ActionButtonCallback() {
    actionOnLabel() {
      "New";
    }
    actionOn() {
      if(!isNull(getRecordId(tabgroup))) {
          newRecord(tabgroup);
          showToast("New record created");
      } else {
          showAlert("Warning", "Any unsaved changes will be lost!", "newRecord(\""+tabgroup+"\")", "");
      }
    }
  }, "success");
  // addNavigationButton("duplicate", new ActionButtonCallback() {
  //   actionOnLabel() {
  //     "Duplicate";
  //   }
  //   actionOn() {
  //     if(!isNull(getRecordId(tabgroup))) {
  //         // duplicateSample();
  //     } else {
  //         showWarning("Warning", "The record could not be duplicated");
  //     }
  //   }
  // }, "primary");
  addNavigationButton("delete", new ActionButtonCallback() {
    actionOnLabel() {
      "Delete";
    }
    actionOn() {
      deleteRecord(tabgroup, getRecordId(tabgroup));
    }
  }, "danger");
}

/*** SYNC ***/
setSyncMinInterval(120.0f);
setSyncMaxInterval(600.0f);
setSyncDelay(5.0f);
/*setSyncEnabled(true);
setFileSyncEnabled(true);*/

/*** MISC ***/

saveEntitiesToRel(type, entity1, entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    
    rel_id = saveRel(null, type, null, null);
    addReln(entity1, rel_id, null);
    addReln(entity2, rel_id, null);
}

saveEntitiesToHierRel(type, entity1, entity2, e1verb, e2verb) {
    if (isNull(entity1) || isNull(entity2)) return;
    
    rel_id = saveRel(null, type, null, null);
    addReln(entity1, rel_id, e1verb);
    addReln(entity2, rel_id, e2verb);
}

makePictureGallery(String attrib) {
    Object gallery = null;
    String query   = "select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabname;";

    fetchAll(
        query,
        new FetchCallback() {
            onFetch(result) {
                gallery = result;
            }
        }
    );

    return gallery;
}

/*** 'Uneditable' - you can edit the code below with extreme precaution ***/

/*** USER ***/

getDefaultUsersList() {
    users = fetchAll("select userid, fname ||' ' || lname from user");
    return users;
}

populateListForUsers(){
    // Populate user dropdown
    fetchAll("select userid, fname || ' ' || lname from user where userdeleted is null;", new FetchCallback() {
        onFetch(result) {
            populateDropDown("user/usertab/users", result);
        }
    });

    // Populate Area code dropdown
    makeVocab("DropDown", "user/usertab/Area_Code", "AreaCode");
}

onEvent("user/usertab/", "show", "populateListForUsers()");

String username = "";
String device = "";
String areaCode = "";

login(){
    if(isNull(getFieldValue("user/usertab/Area_Code")) || isNull(getFieldValue("user/usertab/users"))){
        showWarning("Warning", "Please select a User and an Area Code before logging in.");
    } else {
        String userVocabId = getFieldValue("user/usertab/users");
        fetchOne("select userid,fname,lname,email from user where userid='" + userVocabId + "';", new FetchCallback() {
            onFetch(result) {
                user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
                setUser(user);
                username = result.get(1) + " " + result.get(2);
                showTabGroup("control");
            }
        });

        //fix
        fetchOne("REPLACE INTO localSettings(key, value) VALUES('User', '"+userid+"');");
        fetchOne("REPLACE INTO localSettings(key, value) VALUES('Area', '"+getFieldValue("user/usertab/Area_Code")+"');");

        areaCodeQ = "select vocabid, vocabname from vocabulary join localSettings on (value=vocabid) where key = 'Area' ";
        areaCode  = null;
        fetchOne(
            areaCodeQ,
            new FetchCallback() {
              onFetch(result) {
                areaCode = result.get(0);
              }
            }
        );
    }
}

onEvent("user/usertab/login", "click", "login()");
onEvent("user/usertab/guide", "click", "showTab(\"user/help\")");

/*** end user login code ***/
    
/*** control ***/

onEvent("control/data", "show", "refreshEntities()");
onEvent("control/data/ContextList", "click", "loadContext()");
onEvent("control/data/newContext", "click", "newContext();");
onEvent("control/data/Search", "click", "clearSearch()");
onEvent("control/contextGroup/newContextGroup", "click", "newContextGroup(true);");
onEvent("control/contextGroup/GroupList", "click", "loadContextGroup()");

onEvent("control/data/searchButton", "click", "search()");

clearSearch(){
    setFieldValue("control/data/Search","");
}

onEvent("control/contextGroup", "show", "reloadGroupList()");

reloadGroupList(){
    populateCursorList("control/contextGroup/GroupList", "SELECT uuid, response FROM latestNonDeletedArchEntFormattedIdentifiers JOIN createdmodifiedatby USING (uuid) ORDER BY modifiedat DESC LIMIT ? OFFSET ?", 25);
    refreshTabgroupCSS("control");
}

refreshEntities() {
    context_id = null;
    context_group_id = null;
    menu = false;
    searchFew();
}

searchFew(){
    populateCursorList("control/data/ContextList", ""+
        "SELECT uuid, response  "+
        "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
        "  JOIN createdmodifiedatby USING (uuid) "+
        " WHERE aenttypename = 'Context' "+
        " ORDER BY modifiedat DESC "+
        " LIMIT ? "+
        "OFFSET ?", 10);
}

search(){
    populateCursorList("control/data/ContextList", ""+
        "SELECT uuid, response "+
        "  FROM latestNonDeletedArchEntFormattedIdentifiers " +
        "  JOIN createdmodifiedatby USING (uuid) " +
        " WHERE aenttypename = 'Context' "+
        "   AND uuid IN (select uuid from latestnondeletedaentvalue left outer join vocabulary using (vocabid) where freetext like '%"+getFieldValue("control/data/Search")+"%' or vocabname like '%"+getFieldValue("control/data/Search")+"%' or measure like '%"+getFieldValue("control/data/Search")+"%') "+
        " ORDER BY modifiedat DESC " +
        " LIMIT ? "+
        " OFFSET ? ", 25);
}

/*** ArchEnt: Context ***/
onEvent("Context", "show", "openContextTabs(); keepTabGroupChanges(\"Context\"); saveContext(\"\");");
onEvent("Context", "load", "showTab(\"Context/Context_Deposits\");");
onEvent("Context", "load", "showTab(\"Context/Context_Cuts\");");
onEvent("Context", "load", "showTab(\"Context/Context_Structures\");");

onEvent("Context/Context_GeneralInformation/Details","click","openContextTabs();");
onEvent("Context/Context_GeneralInformation/close", "click", "fillInCloseDate()");
onEvent("Context/Texture_Helper/Update_Texture", "click", "setTextureActual()");
onEvent("Context/Texture_Helper/Return", "click", "returnToContext()");
onEvent("Context/Context_Deposits/Texture_Helper", "click", "helpSetTextureActual()");

onEvent("Context/Context_Deposits/newMatrix", "click", "newMatrix();");
onEvent("Context/Context_Deposits/loadMatrix", "click", "loadMatrix()");
onEvent("Context/Context_Deposits/deleteMatrix", "click", "deleteMatrixFromContext()");

onEvent("Context/Context_Interpretation/AddContextGroup", "click", "newContextGroup(false)");
onEvent("Context/Context_Interpretation/ShowContextGroup", "click", "loadContextGroupFromContext()");
onEvent("Context/Context_Interpretation/RemoveFromContextGroup", "click", "removeContextGroupReln()");

onEvent("Context/Context_Structures/newAdobe", "click", "newAdobe();");
onEvent("Context/Context_Structures/loadAdobe", "click", "loadAdobe()");
onEvent("Context/Context_Structures/deleteAdobe", "click", "deleteAdobeFromContext()");
onEvent("Context/Context_Structures", "show", "updateAllContextAdobes()");

onEvent("Context/Context_Attachments/newPhotoLog", "click", "newPhotoLog();");
onEvent("Context/Context_Attachments/loadPhotoLog", "click", "loadPhotoLog()");
onEvent("Context/Context_Attachments/deletePhotoLog", "click", "deletePhotoLogFromContext()");

onEvent("Context/Context_Attachments/attachPhoto", "click", "attachPictureTo(\"Context/Context_Attachments/Photo\")");
onEvent("Context/Context_Attachments/attachSketch", "click", "attachFileTo(\"Context/Context_Attachments/Sketch\")");
onEvent("Context/Context_Attachments/viewattached", "click", "viewArchEntAttachedFiles(context_id)");
onEvent("Context/Context_Attachments/SaveAndNew", "delayclick", "newContext();openContextTabs();");
onEvent("Context/Context_Attachments/Duplicate", "delayclick", "duplicateContext()");
onEvent("Context/Context_Attachments/Delete", "delayclick", "deleteContext()");

onEvent("Context/Context_Artefacts/newArtefactGroup", "delayclick", "newArtefactGroup();");
onEvent("Context/Context_Artefacts/loadArtefactGroup", "click", "loadArtefactGroup()");
onEvent("Context/Context_Artefacts/deleteArtefactGroup", "delayclick", "deleteArtefactGroupFromContext()");
onEvent("Context/Context_Artefacts/newSpecialFind", "delayclick", "newSpecialFind();");
onEvent("Context/Context_Artefacts/loadSpecialFind", "click", "loadSpecialFind()");
onEvent("Context/Context_Artefacts/deleteSpecialFind", "delayclick", "deleteSpecialFindFromContext()");

onEvent("Context/Context_Samples/newSample", "click", "newSample();");
onEvent("Context/Context_Samples/loadSample", "click", "loadSample()");
onEvent("Context/Context_Samples/deleteSample", "click", "deleteSampleFromContext()");

onEvent("Context/Context_Deposits", "show", "updateAllContextMatrices()");
onEvent("Context/Context_Interpretation", "show", "updateAllContextGroups()");
onEvent("Context/Context_Relationships_to_Other_Contexts", "show", "updateAllContextRelationships()");
onEvent("Context/Context_Artefacts", "show", "updateAllContextArtefacts()");
onEvent("Context/Context_Samples", "show", "updateAllContextSamples()");
onEvent("Context/Context_Attachments", "show", "updateAllContextPhotologs()");

onEvent("Context/Context_Relationships_to_Other_Contexts/relate", "delayclick", "makeHierReln()");
onEvent("Context/Context_Relationships_to_Other_Contexts/showReln", "click", "loadContextFromReln()");
onEvent("Context/Context_Relationships_to_Other_Contexts/deleteReln", "delayclick", "deleteReln()");
onEvent("Context/Context_Relationships_to_Other_Contexts/listOfRelns", "click", "showRelnFromList()");


String context_id = null;

Object dialog;

newContext(){
    String increment = getFieldValue("control/data/ContextIncrement");
    if (isNull(increment)) {
        showWarning("Alert!","No starting ID is entered. Please enter one. ");
        return;   
    }

    context_id = null;
    newTabGroup("Context");
    contextIncrement = Integer.parseInt(increment);
    setFieldValue("control/data/ContextIncrement", contextIncrement+1);

    fetchOne("REPLACE INTO localSettings(key, value) VALUES('contextIncrement', '" + contextIncrement + "');", null);
    setFieldValue("Context/Context_GeneralInformation/AreaCode", areaCode.substring(0,3));
    setFieldValue("Context/Context_GeneralInformation/Grid_Location_Reference", areaCode.substring(0,4));
    setFieldValue("Context/Context_Measure/Datum", areaCode.substring(0,4));

    setFieldValue("Context/Context_GeneralInformation/Site_Code","PAZC14");
    setFieldValue("Context/Context_GeneralInformation/Context_ID", contextIncrement);
    setTimestamp("Context/Context_GeneralInformation/Date_Opened");
    
    setFieldValue("Context/Context_GeneralInformation/CreatingUser", username);

    // make autosaving work
}

loadContext() {
    //TODO redo the loading
    context_id = getListItemValue();
    loadContextFrom(context_id);

    //do we need to load user from createdmodifiedatby to the creating user field?
    
}

loadContextFrom(contextid) {
    context_id = contextid;
    if (isNull(context_id)) return;
    
    showTabGroup("Context", context_id);
}

saveContext(String callback) {  
    if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    if (!isNull(context_id)) {
        entity = fetchArchEnt(context_id);
    }
    Boolean enable_autosave = true;
    saveTabGroup("Context", context_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            context_id = uuid;
            execute(callback);
        }
        onError(message) {
            showToast(message);
        }
    }, enable_autosave);
}

//make duplicate context work.


deleteContext(){
    if (!isNull(context_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Context!", "reallyDeleteContext()", "doNotDelete()");
    } else {
        cancelTabGroup("Context", true);
    }
}

reallyDeleteContext(){
    deleteArchEnt(context_id);
    cancelTabGroup("Context", false);
}

doNotDelete(){
    showToast("Delete Cancelled.");
}


loadContextFromReln(){
    String relnid = getFieldValue("Context/Context_Relationships_to_Other_Contexts/listRelns");
    if (!isNull(relnid)){   
        Object uuid = fetchOne("select uuid from latestNonDeletedAentReln where relationshipID = '"+relnid+"' and uuid != '"+context_id+"';");
        context_id = uuid.get(0);
        loadContextFrom(uuid.get(0));
    }
}

deleteReln(){
    relnid = getFieldValue("Context/Context_Relationships_to_Other_Contexts/listRelns");
    
    String query = "insert into aentreln (uuid, relationshipid, deleted, participatesverb, userid) select uuid, relationshipid, 'true', participatesverb, '"+userid+"' from latestnondeletedaentreln where relationshipid = '"+relnid+"';";
    
    fetchOne(query);
    deleteRel(relnid);
    updateRelns();
}

fillInCloseDate(){
    if(getFieldValue("Context/Context_GeneralInformation/Date_Closed").equals("")){
        setTimestamp("Context/Context_GeneralInformation/Date_Closed");        
    } else {
        showToast("To avoid accidents, please clear the Date Closed field before updating.");
    }
}
//todo wire in placeholder archents into all of these.


updateContextRelationshipBasedDropdown(path, relntypename, uuid){
    if (!isNull(context_id)){
        fetchAll("select childuuid, response "+
                 "  from parentchild join latestnondeletedaentformattedidentifier on (childuuid = uuid) "+
                 "  join createdmodifiedatby using (uuid) "+
                 " where relationshipid in (select relationshipid  "+
                 "                            from latestnondeletedrelationship join relntype using (relntypeid)  "+
                 "                           where relntypename = '"+relntypename+"' "+
                 "                             and uuid = "+uuid+") "+
                 "   and parentaenttypename = 'Context' "+
                 " order by createdat desc; "+
                 "",

        new FetchCallback() {
          onFetch(result) {
            populateDropDown(path, result);

          }
        });
    }
}

updateNonContextRelationshipBasedDropdown(path, relntypename, parentaenttypename, uuid){
    if (!isNull(context_id)){
        fetchAll("select childuuid, response "+
                 "  from parentchild join latestnondeletedaentformattedidentifier on (childuuid = uuid) "+
                 "  join createdmodifiedatby using (uuid) "+
                 " where relationshipid in (select relationshipid  "+
                 "                            from latestnondeletedrelationship join relntype using (relntypeid)  "+
                 "                           where relntypename = '"+relntypename+"' "+
                 "                             and uuid = "+uuid+") "+
                 "   and parentaenttypename = '"+parentaenttypename+"' "+
                 " order by createdat desc; "+
                 "",

        new FetchCallback() {
          onFetch(result) {
            populateDropDown(path, result);
          }
        });
    }
}



updateAllContextMatrices() {
    updateContextRelationshipBasedDropdown("Context/Context_Deposits/matrixList", "ContextMatrix",context_id);
}


updateAllContextGroups() {
    updateContextRelationshipBasedDropdown("Context/Context_Interpretation/ContextGroupList", "ContextContextGroup", context_id);
}

updateAllContextArtefacts(){
    updateContextRelationshipBasedDropdown("Context/Context_Artefacts/artefactGroupList", "ContextArtefactGroup", context_id);
    updateContextRelationshipBasedDropdown("Context/Context_Artefacts/specialFindList", "ContextSpecialFind", context_id);


}

updateAllContextSamples(){
    updateContextRelationshipBasedDropdown("Context/Context_Samples/sampleList", "ContextSample", context_id);
}

updateAllContextRelationships(){

    //TODO Figure out how to make this a cursor list, otherwise performance will scale like shit


    setFieldValue("Context/Context_Relationships_to_Other_Contexts/context_id", getFieldValue("Context/Context_GeneralInformation/Context_ID"));

    Object contextList = new ArrayList();
    
    if (!isNull(context_id)){
        String query = "select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' ') as response from latestNonDeletedArchEntIdentifiers where aenttypename = 'Context' and uuid != '"+context_id+"' group by uuid;";

        fetchAll(
            query,
            new FetchCallback() {
                onFetch(result) {
                    contextList = result;
                }
            }
        );
    }
    populateDropDown("Context/Context_Relationships_to_Other_Contexts/context", contextList);

    updateRelns();
}

updateAllContextPhotologs() {
    updateContextRelationshipBasedDropdown("Context/Context_Attachments/PhotoLogList", "ContextPhotographLog", context_id);

}

makeHierReln(){
    if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }

    if (isNull(context_id)){
        showToast("You must have saved your entity.");
        return;
    }
    String[] arguments = getFieldValue("Context/Context_Relationships_to_Other_Contexts/reln").split("~!~");
    String dest = getFieldValue("Context/Context_Relationships_to_Other_Contexts/context");

    saveEntitiesToHierRel(arguments[0], context_id, dest, arguments[1], arguments[2]);
    updateRelns();    
}

showRelnFromList(){
    listID = getListItemValue();
    //TODO figure out how to refactor this. 
    foo = fetchOne("select group_concat(response, '\n') from ( select attributename || ': ' || coalesce(vocabname, freetext) as response from ( select uuid from latestnondeletedarchent join latestnondeletedaentreln using (uuid) where uuid != "+context_id+" and relationshipid = "+listID+" ) join latestnondeletedaentvalue using (uuid) join attributekey using (attributeid) left outer join vocabulary using (attributeid, vocabid) where attributename in ('Context ID', 'Context Type', 'Brief Description', 'Date Opened', 'Date Closed', 'Your Interpretation', 'Your description')  and coalesce(vocabname, freetext) is not null group by uuid, attributename order by case attributename when 'Context ID' then 1 when 'Context Type' then 2 when 'Your Interpretation' then 3 when 'Your description' then 4 when 'Date Opened' then 5 when 'Date Closed' then 6 end); ");
    if (!isNull(foo)){
        showToast(foo.get(0));
    }
}

updateRelns(){
    //TODO Figure out a better way of doing this other than a dropdown.

    populateCursorList("Context/Context_Relationships_to_Other_Contexts/listOfRelns","select childuuid, response "+
         "  from parentchild join latestnondeletedaentformattedidentifier on (childuuid = uuid) "+
         "  join createdmodifiedatby using (uuid) "+
         " where relationshipid in (select relationshipid  "+
         "                            from latestnondeletedrelationship join relntype using (relntypeid)  "+
         "                           where relntypename not like 'Context%' "+
         "                             and uuid = "+uuid+") "+
         "   and parentaenttypename = 'Context' "+
         " order by createdat desc "+
         " limit ? offset ? ;", 25);
}

loadContextAttributes(){       
    makeVocab("DropDown", "Context/Context_GeneralInformation/Type_of_Definition", "Type of Definition");
    makeVocab("DropDown", "Context/Context_GeneralInformation/Excavation_Method", "Excavation Method");
    makeVocab("DropDown", "Context/Context_GeneralInformation/Context_Type", "Context Type");
    makeVocab("DropDown", "Context/Context_Deposits/Soil_Compaction_Type", "Soil Compaction Type");
    makeVocab("DropDown", "Context/Context_Deposits/Soil_Munsell_Colour", "Soil Munsell Colour");
    makeVocab("DropDown", "Context/Context_Deposits/Soil_Particle_Sorting", "Soil Particle Sorting");
    //Hierarchical makeVocab("DropDown", "Context/Context_Deposits/Soil_Texture_Actual", "Soil Texture");
    makeVocab("DropDown", "Context/Context_Deposits/Horizon_Boundary", "Horizon Boundary");
    makeVocab("DropDown", "Context/Context_Cuts/Shape_of_Cut", "Shape of Cut");
    makeVocab("RadioGroup", "Context/Context_Cuts/Shape_of_Corners", "Shape of Corners");
    makeVocab("RadioGroup", "Context/Context_Cuts/Break_of_Slope_Top", "Break of Slope - Top");
    makeVocab("RadioGroup", "Context/Context_Cuts/Break_of_slope_Base", "Break of slope - Base");
    makeVocab("DropDown", "Context/Context_Cuts/Sides_of_Cut", "Sides of Cut");
    makeVocab("DropDown", "Context/Context_Cuts/Shape_of_Base", "Shape of Base");
    makeVocab("RadioGroup", "Context/Context_Cuts/Orientation", "Orientation");
    makeVocab("DropDown", "Context/Context_Structures/Structural_Components", "Structural Components");
    makeVocab("DropDown", "Context/Context_Structures/Bonding", "Bonding");
    makeVocab("DropDown", "Context/Context_Structures/Bond_Type", "Bond Type");
    makeVocab("RadioGroup", "Context/Context_Interpretation/Your_Interpretation", "Your Interpretation");
    makeVocab("DropDown", "Context/Context_Interpretation/Phase_From", "Phase From");
    makeVocab("DropDown", "Context/Context_Interpretation/Phase_To", "Phase To");
    //makeVocab("DropDown", "Context/Context_Interpretation/ContextGroupList", "");

    //TODO picture gallery, hierarchical, etc

    // TODO -- we need to discuss how to implement "relating contexts to each other" -- this is not a very good way to do it at all. 
    // relnList = fetchAll("select relntypename||'~!~'||coalesce(nullif(parent||'~!~'||child,'~!~'),relntypename||'~!~'||relntypename) as relntypeid, coalesce(nullif(parent,''), relntypename) as name, relntypeid from relntype where relntypename not like '%Context%' and relntypename not like '%SpecialFind%' union select relntypename||'~!~'||coalesce(nullif(child||'~!~'||parent,'~!~'),relntypename||'~!~'||relntypename), coalesce(nullif(child,''), relntypename) as name, relntypeid from relntype where relntypename not like '%Context%' and relntypename not like '%SpecialFind%' order by relntypeid, name;");
    // populateDropDown("Context/Context_Relationships_to_Other_Contexts/reln", relnList);

}

openContextTabs(){
    

//TODO: Check this. I'm sure we have new functions that makes this easier.
    fetchOne("select vocabName from vocabulary where vocabid = '"+getFieldValue("Context/Context_GeneralInformation/Context_Type")+"';",

        new FetchCallback() {
          onFetch(name) {
            if (!isNull(name)){
                String vocab = name.get(0);
                if ((vocab.equals("{Deposit}")) || (vocab.equals("{Natural}"))){
                    cancelTab("Context/Context_Cuts", false);
                    cancelTab("Context/Context_Structures", false);
                    showTab("Context/Context_Deposits");
                } else if (vocab.equals("{Cut}")){
                    cancelTab("Context/Context_Deposits", false);
                    cancelTab("Context/Context_Structures", false);
                    showTab("Context/Context_Cuts");
                } else if (vocab.equals("{Structure}")){
                    cancelTab("Context/Context_Deposits", false);
                    cancelTab("Context/Context_Cuts", false);
                    showTab("Context/Context_Structures");
                }
            } else {

                cancelTab("Context/Context_Cuts", false);
                cancelTab("Context/Context_Deposits", false);
                cancelTab("Context/Context_Structures", false);
            }

          }});    
}

helpSetTextureActual(){
    showTab("Context/Texture_Helper");
}

setTextureActual(){

    //This function makes the hierarchical soil texture selector write to the texture dropdown. We should discuss.
    fetchOne("select vocabid from vocabulary join attributekey using (attributeid)where attributeName = 'Soil Texture Actual'and vocabname = (select vocabname"
        + " from vocabulary join attributekey using (attributeid) "
       + " where vocabid = '"+ getFieldValue("Context/Texture_Helper/Soil_Texture") +"' "
         + " and attributeName = 'Soil Texture'); ",

        new FetchCallback() {
          onFetch(textureToSet) {
            if(!isNull(textureToSet)){
                setFieldValue("Context/Context_Deposits/Soil_Texture_Actual", textureToSet.get(0));
            }
            cancelTab("Context/Texture_Helper", false);
            showTab("Context/Context_Deposits");
            }});


}

returnToContext(){
    cancelTab("Context/Texture_Helper", false);
    showTab("Context/Context_Deposits");
}
/*
TODO: redo. figure out what queries are needed here.)
remremoveContextGroupReln() {
    context_group_id = getFieldValue("Context/Context_Interpretation/ContextGroupList");
    if(!isNull(context_id) && !isNull(context_group_id)) {
        Object obj = fetchOne("select context.uuid, contextgroup.uuid, relationshipid  " +
            "from latestnondeletedaentreln context join latestnondeletedaentreln contextgroup using (relationshipid) " +
            "where context.uuid != contextgroup.uuid " +
            "and context.uuid = " + context_id + " " +
            "and contextgroup.uuid = " + context_group_id + ";");
        String relnid = obj.get(2);
        if(!isNull(relnid)) {
            String query = "insert into aentreln (uuid, relationshipid, deleted, participatesverb, userid) select uuid, relationshipid, 'true', participatesverb, '" + userid + "' from latestnondeletedaentreln where relationshipid = '" + relnid + "';";
            fetchOne(query);
            deleteRel(relnid);
            updateAllContextGroups();
        }
        
    }
}
*/

/*** ArchEnt: Context Group***/
onEvent("ContextGroup", "show", "keepTabGroupChanges(\"ContextGroup\"); saveContextGroup(\"\");");

onEvent("ContextGroup/ContextGroup_Details/Delete", "click", "deleteContextGroup()");
onEvent("ContextGroup/ContextGroup_Contexts/AddContext", "click", "addToContextGroup()");
onEvent("ContextGroup/ContextGroup_Contexts/ShowContext", "click", "loadContextFromContextGroup()");
onEvent("ContextGroup/ContextGroup_Contexts/RemoveContext", "click", "removeFromContextGroup()");

String context_group_id = null;

validateContextGroup() {
    if (isNull(getFieldValue("ContextGroup/ContextGroup_Details/Title"))) {
        showWarning("Validation Error", "Context Group requires a title to be saved.");
        return;
    }
}

newContextGroup(menu){
    if (!menu && isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    newTabGroup("ContextGroup");
    context_group_id = null;
    setFieldValue("ContextGroup/ContextGroup_Details/Site_Code","PAZC14");
    setFieldValue("ContextGroup/ContextGroup_Details/Area_Code", areaCode.substring(0,3));
    populateContextGroup();
}

loadContextGroup(){
    context_group_id = getListItemValue();
    showTabGroup("ContextGroup", context_group_id);
    populateContextGroup();
}

loadContextGroupFromContext() {
    context_group_id = getFieldValue("Context/Context_Interpretation/ContextGroupList");
    if (isNull(context_group_id)) return;
    showTabGroup("ContextGroup", context_group_id);
    populateContextGroup();
}

saveContextGroup(){
    if (isNull(context_group_id)) context_group_id = null;
    Boolean enable_autosave = true;
    saveTabGroup("ContextGroup", context_group_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            context_group_id = uuid;
            onContextGroupSaved();
            populateContextGroup();
        }
        onError(message) {
            showToast(message);
        }
    }, enable_autosave);
}

onContextGroupSaved(){
    if(!isNull(context_id)) {
        context_group_id = getLastSavedRecordId();
        saveEntitiesToRel("ContextContextGroup", context_id, context_group_id);
    }
}

addToContextGroup() {
    if (isNull(context_group_id)) {
        saveContextGroup();
        return;
    }
    saveEntitiesToRel("ContextContextGroup", getFieldValue("ContextGroup/ContextGroup_Contexts/AddContextList"), context_group_id);
    populateContextGroup();
}

populateContextGroup() {
    showToast("TODO: update populateContextGroup() method");
//     //updateNonContextRelationshipBasedDropdown("ContextGroup/ContextGroup_Contexts/AddContextList", 'ContextContextGroup', 'ContextGroup', context_group_id);
//     //TODO: Discuss how to turn these into cursor lists. I don't think this scales well.
    
//     populateDropDown("ContextGroup/ContextGroup_Contexts/AddContextList", 
//         fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
//             "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
//             "            FROM latestNonDeletedArchentIdentifiers\n"+
//             "           WHERE aenttypename = 'Context'\n"+
//             "             AND uuid not in (select uuid\n"+
//             "                            FROM latestNonDeletedAentReln\n"+
//             "                           where relationshipid in (select relationshipid\n"+
//             "                                                      FROM latestNonDeletedAentReln\n"+
//             "                                                      JOIN relationship using (relationshipid)\n"+
//             "                                                      JOIN relntype using (relntypeid)\n"+
//             "                                                     where uuid = "+context_group_id+"\n"+
//             "                                                       and relntypeName = 'ContextContextGroup')\n"+
//             "                             and uuid != "+context_group_id+")\n"+
//             "        ORDER BY uuid, attributename ASC)\n"+
//             "group by uuid\n"+
//             "order by valuetimestamp desc, uuid, attributename;"));
//     populateDropDown("ContextGroup/ContextGroup_Contexts/ContextList", 
//         fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
//             "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
//             "            FROM latestNonDeletedArchentIdentifiers\n"+
//             "           WHERE aenttypename = 'Context'\n"+
//             "             AND uuid in (select uuid\n"+
//             "                            FROM latestNonDeletedAentReln\n"+
//             "                           where relationshipid in (select relationshipid\n"+
//             "                                                      FROM latestNonDeletedAentReln\n"+
//             "                                                      JOIN relationship using (relationshipid)\n"+
//             "                                                      JOIN relntype using (relntypeid)\n"+
//             "                                                     where uuid = "+context_group_id+"\n"+
//             "                                                       and relntypeName = 'ContextContextGroup')\n"+
//             "                             and uuid != "+context_group_id+")\n"+
//             "        ORDER BY uuid, attributename ASC)\n"+
//             "group by uuid\n"+
//             "order by valuetimestamp desc, uuid, attributename;"));
    
}

loadContextGroupAttributes(){
    // populatePictureGallery("ContextGroup/ContextGroup_Details/Context_Type", makePictureGallery("CG Context Type"));
    // populateDropDown("ContextGroup/ContextGroup_Details/Phase_From", makeVocab("CG Phase From"));
    // populateDropDown("ContextGroup/ContextGroup_Details/Phase_To", makeVocab("CG Phase To"));
}

loadContextFromContextGroup(){
    loadContextFrom(getFieldValue("ContextGroup/ContextGroup_Contexts/ContextList"));
}

deleteContextGroup(){
    if (!isNull(context_group_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Context Group!", "reallyDeleteContextGroup()", "doNotDelete()");
    }
}           

reallyDeleteContextGroup(){
    deleteArchEnt(context_group_id);
    cancelTabGroup("ContextGroup", false);
}

doNotDelete(){
    showToast("Delete Cancelled.");
}
/* TODO: Redo.

removeFromContextGroup() {
    context_id = getFieldValue("ContextGroup/ContextGroup_Contexts/ContextList");
    if(!isNull(context_id) && !isNull(context_group_id)) {
        Object obj = fetchOne("select context.uuid, contextgroup.uuid, relationshipid  " +
            "from latestnondeletedaentreln context join latestnondeletedaentreln contextgroup using (relationshipid) " +
            "where context.uuid != contextgroup.uuid " +
            "and context.uuid = " + context_id + " " +
            "and contextgroup.uuid = " + context_group_id + ";");
        String relnid = obj.get(2);
        if(!isNull(relnid)) {
            String query = "insert into aentreln (uuid, relationshipid, deleted, participatesverb, userid) select uuid, relationshipid, 'true', participatesverb, '" + userid + "' from latestnondeletedaentreln where relationshipid = '" + relnid + "';";
            fetchOne(query);
            deleteRel(relnid);
            populateContextGroup();
        }
        
    }
}
*/

/*** Artefact Group ***/
onEvent("Artefact_Group", "show", "keepTabGroupChanges(\"Artefact_Group\"); saveArtefactGroup(\"\");");
onEvent("Artefact_Group/Artefact_Group_GeneralInformation/attachPhoto", "click", "attachPictureTo(\"Artefact_Group/Artefact_Group_GeneralInformation/Photo\")");
onEvent("Artefact_Group/Artefact_Group_GeneralInformation/attachSketch", "click", "attachFileTo(\"Artefact_Group/Artefact_Group_GeneralInformation/Sketch\")");
onEvent("Artefact_Group/Artefact_Group_GeneralInformation/viewattached", "click", "viewArchEntAttachedFiles(artefact_group_id)");
onEvent("Artefact_Group/Artefact_Group_GeneralInformation/SaveAndNew", "delayclick", "newArtefactGroup();");
onEvent("Artefact_Group/Artefact_Group_GeneralInformation/Duplicate", "delayclick", "artefact_group_id=null; autoNumArtefactGroup();");
onEvent("Artefact_Group/Artefact_Group_GeneralInformation/Delete", "delayclick", "deleteArtefactGroup()");

String artefact_group_id = null;

validateArtefactGroup() {
    if (isNull(getFieldValue("Artefact_Group/Artefact_Group_GeneralInformation/Artefact_Group_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
}

newArtefactGroup(){
    if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    if (isNull(context_id)){
        showToast("You must save a context first.");
        return;
    }
    artefact_group_id = null;
    newTabGroup("Artefact_Group");
    setFieldValue("Artefact_Group/Artefact_Group_GeneralInformation/Context_ID", getFieldValue("Context/Context_GeneralInformation/Context_ID"));
    setFieldValue("Artefact_Group/Artefact_Group_GeneralInformation/Site_Code", getFieldValue("Context/Context_GeneralInformation/Site_Code"));
    autoNumArtefactGroup();
}

loadArtefactGroup() {
    artefact_group_id = getFieldValue("Context/Context_Artefacts/artefactGroupList");
    if (isNull(artefact_group_id)) return;
    loadArtefactGroupAttributes();
    showTabGroup("Artefact_Group", artefact_group_id);
}

saveArtefactGroup(String callback) {
    if (!isNull(artefact_group_id)) {
        entity = fetchArchEnt(artefact_group_id);
    } else {
        artefact_group_id = null;
    }
    Boolean enable_autosave = true;
    saveTabGroup("Artefact_Group", artefact_group_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            artefact_group_id = uuid;
            onArtefactGroupSaved();
            execute(callback);
        }
        onError(message) {
            showToast(message);
        }
    }, enable_autosave);
}

onArtefactGroupSaved(){
    artefact_group_id = getLastSavedRecordId();
    saveEntitiesToRel("ContextArtefactGroup", context_id, artefact_group_id);
    showToast("Associated with Context");
}

deleteArtefactGroupFromContext(){
    artefact_group_id = getFieldValue("Context/Context_Artefacts/artefactGroupList");
    if (!isNull(artefact_group_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Artefact Group!", "reallyDeleteArtefactGroup()", "doNotDelete()");
    }
}

deleteArtefactGroup(){
    if (!isNull(artefact_group_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Artefact Group!", "reallyDeleteArtefactGroup()", "doNotDelete()");
    } else {
        cancelTabGroup("Artefact_Group", true);
    }
}

reallyDeleteArtefactGroup(){
    deleteArchEnt(artefact_group_id);
    showTabGroup("Artefact_Group");
    cancelTabGroup("Artefact_Group", false);
}

doNotDelete(){
    showToast("Delete Cancelled.");
}

loadArtefactGroupAttributes(){
    // populateHierarchicalDropDown("Artefact_Group/Artefact_Group_GeneralInformation/Artefact_Class", "Artefact Class");
}


/*** Sample ***/
onEvent("Sample", "show", "keepTabGroupChanges(\"Sample\"); saveSample(\"\");");
onEvent("Sample/Sample_GeneralInformation/attachPhoto", "click", "attachPictureTo(\"Sample/Sample_GeneralInformation/Photo\")");
onEvent("Sample/Sample_GeneralInformation/attachSketch", "click", "attachFileTo(\"Sample/Sample_GeneralInformation/Sketch\")");
onEvent("Sample/Sample_GeneralInformation/viewattached", "click", "viewArchEntAttachedFiles(sample_id)");
onEvent("Sample/Sample_GeneralInformation/SaveAndNew", "delayclick", "newSample();");
onEvent("Sample/Sample_GeneralInformation/Duplicate", "delayclick", "sample_id = null; sampleAutoNum();");
onEvent("Sample/Sample_GeneralInformation/Delete", "delayclick", "deleteSample()");

String sample_id = null;

validateSample() {
    if (isNull(getFieldValue("Sample/Sample_GeneralInformation/Sample_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
}

newSample(){
    if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    if (isNull(context_id)){
        showToast("You must save a context first.");
        return;
    }
    sample_id = null;
    newTabGroup("Sample");
    setFieldValue("Sample/Sample_GeneralInformation/Context_ID", getFieldValue("Context/Context_GeneralInformation/Context_ID"));
    setFieldValue("Sample/Sample_GeneralInformation/Site_Code", getFieldValue("Context/Context_GeneralInformation/Site_Code"));
    sampleAutoNum();
}

loadSample() {
    sample_id = getFieldValue("Context/Context_Samples/sampleList");
    if (isNull(sample_id)) return;
    loadSampleAttributes();
    showTabGroup("Sample", sample_id);
}

saveSample(String callback) {
    if (!isNull(sample_id)) {
        entity = fetchArchEnt(sample_id);
    } else {
        sample_id = null;
    }
    Boolean enable_autosave = true;
    saveTabGroup("Sample", sample_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            sample_id = uuid;
            onSampleSaved();
            execute(callback);
        }
        onError(message) {
            showToast(message);
        }
    }, enable_autosave);
}

onSampleSaved(){
    sample_id = getLastSavedRecordId();
    saveEntitiesToRel("ContextSample", context_id, sample_id);
    showToast("Associated with Context");

}

deleteSampleFromContext(){
    sample_id = getFieldValue("Context/Context_Samples/sampleList");
    if (!isNull(sample_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Sample!", "reallyDeleteSample()", "doNotDelete()");
    }
}

deleteSample(){
    if (!isNull(sample_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Sample!", "reallyDeleteSample()", "doNotDelete()");
    } else {
        cancelTabGroup("Sample", true);
    }
}

reallyDeleteSample(){
    deleteArchEnt(sample_id);
    showTabGroup("Sample");
    cancelTabGroup("Sample", false);
}

doNotDelete(){
    showToast("Delete Cancelled.");
}

loadSampleAttributes(){
    // populateDropDown("Sample/Sample_GeneralInformation/Sample_Type", makeVocab("Sample Type"));
    // populateDropDown("Sample/Sample_GeneralInformation/Collection_Method", makeVocab("Collection Method"));
}


/*** Matrix ***/
onEvent("Matrix", "show", "keepTabGroupChanges(\"Matrix\"); saveMatrix(\"\");");
onEvent("Matrix/Matrix/Delete", "delayclick", "deleteMatrix()");
onEvent("Matrix/Matrix/SaveAndNew", "delayclick", "newMatrix();");

String matrix_id = null;

validateMatrix() {
    if (isNull(getFieldValue("Matrix/Matrix/Component"))) {
        showWarning("Logic Error", "Cannot save Matrix without Component");
        return;
    }
}

newMatrix(){
    if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    if (isNull(context_id)){
        showToast("You must save a context first.");
        return;
    }
    matrix_id = null;
    newTabGroup("Matrix");
}

loadMatrix() {
    matrix_id = getFieldValue("Context/Context_Deposits/matrixList");
    if (isNull(matrix_id)) return;
    loadMatrixAttributes();
    showTabGroup("Matrix", matrix_id);
}

saveMatrix(String callback) {
    if (!isNull(matrix_id)) {
        entity = fetchArchEnt(matrix_id);
    } else {
        matrix_id = null;
    }
    Boolean enable_autosave = true;
    saveTabGroup("Matrix", matrix_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            matrix_id = uuid();
            onMatrixSaved();
            execute(callback);
        }
        onError(message) {
            showToast(message);
        }
    }, enable_autosave);
}

onMatrixSaved(){
    matrix_id = getLastSavedRecordId();
    saveEntitiesToRel("ContextMatrix", context_id, matrix_id);
    showToast("Associated with Context");

}

deleteMatrixFromContext(){
    matrix_id = getFieldValue("Context/Context_Deposits/matrixList");
    if (!isNull(matrix_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Matrix!", "reallyDeleteMatrix()", "doNotDelete()");
    }
}

deleteMatrix(){
    if (!isNull(matrix_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Matrix!", "reallyDeleteMatrix()", "doNotDelete()");
    } else {
        cancelTabGroup("Matrix", true);
    }
}

reallyDeleteMatrix(){
    deleteArchEnt(matrix_id);
    showTabGroup("Matrix");
    cancelTabGroup("Matrix", false);
}

doNotDelete(){
    showToast("Delete Cancelled.");
}

loadMatrixAttributes(){
    // populateDropDown("Matrix/Matrix/Component_Type", makeVocab("Component Type"));
    // populateDropDown("Matrix/Matrix/Component", makeVocab("Component"));
    // populateHierarchicalPictureGallery("Matrix/Matrix/Shape", "Shape");
}

/*** Special Find ***/
onEvent("Special_Find", "show", "keepTabGroupChanges(\"Special_Find\"); saveSpecialFind(\"\");");
onEvent("Special_Find/Special_Find_GeneralInformation/attachPhoto", "click", "attachPictureTo(\"Special_Find/Special_Find_GeneralInformation/Photo\")");
onEvent("Special_Find/Special_Find_GeneralInformation/SaveAndNew", "delayclick", "newSpecialFind();");
onEvent("Special_Find/Special_Find_GeneralInformation/Duplicate", "delayclick", "special_find_id = null; specialFindAutoNum();");
onEvent("Special_Find/Special_Find_GeneralInformation/Delete", "delayclick", "deleteSpecialFind()");

onEvent("Special_Find/Special_Find_Location", "show", "refreshSpecialFindLocations()");
onEvent("Special_Find/Special_Find_Location/New_Special_Find_Location", "delayclick", "newSpecialFindLocation();");
onEvent("Special_Find/Special_Find_Location/List_Special_Find_Location", "click", "loadSpecialFindLocation()");

String special_find_id = null;

validateSpecialFind(){
    if (isNull(getFieldValue("Special_Find/Special_Find_GeneralInformation/Special_Find_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
}

newSpecialFind(){
    if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    if (isNull(context_id)){
        showToast("You must save a context first.");
        return;
    }
    special_find_id = null;
    newTabGroup("Special_Find");
    setFieldValue("Special_Find/Special_Find_GeneralInformation/Context_ID", getFieldValue("Context/Context_GeneralInformation/Context_ID"));
    setFieldValue("Special_Find/Special_Find_GeneralInformation/Site_Code", getFieldValue("Context/Context_GeneralInformation/Site_Code"));
    specialFindAutoNum();
}

loadSpecialFind() {
    special_find_id = getFieldValue("Context/Context_Artefacts/specialFindList");
    if (isNull(special_find_id)) return;
    loadSpecialFindAttributes();
    showTabGroup("Special_Find", special_find_id);
}

saveSpecialFind(String callback) {
    if (!isNull(special_find_id)) {
        entity = fetchArchEnt(special_find_id);
    }
    Boolean enable_autosave = true;
    saveTabGroup("Special_Find", special_find_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            special_find_id = uuid;
            onSpecialFindSaved();
            execute(callback);
        }
        onError(message) {
            showToast(message);
        }
    }, enable_autosave);
}

onSpecialFindSaved(){
    special_find_id = getLastSavedRecordId();
    saveEntitiesToRel("ContextSpecialFind", context_id, special_find_id);
    showToast("Associated with Context");
}

deleteSpecialFindFromContext(){
    special_find_id = getFieldValue("Context/Context_Artefacts/specialFindList");
    if (!isNull(special_find_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Special Find!", "reallyDeleteSpecialFind()", "doNotDelete()");
    }
}

deleteSpecialFind(){
    if (!isNull(special_find_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Special Find!", "reallyDeleteSpecialFind()", "doNotDelete()");
    } else {
        cancelTabGroup("Special_Find", true);
    }
}

reallyDeleteSpecialFind(){
    deleteArchEnt(special_find_id);
    showTabGroup("Special_Find");
    cancelTabGroup("Special_Find", false);
}

doNotDelete(){
    showToast("Delete Cancelled.");
}

loadSpecialFindAttributes(){
    // populateHierarchicalDropDown("Special_Find/Special_Find_GeneralInformation/Special_Find_Class", "Special Find Class");
}

// refreshSpecialFindLocations() {
//     Object specialFindLocations = new ArrayList();
//     if (!isNull(special_find_id)){
//         specialFindLocations = fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
//             "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
//             "            FROM latestNonDeletedArchentIdentifiers\n"+
//             "           WHERE aenttypename = 'Special Find Location'\n"+
//             "             AND uuid in (select uuid\n"+
//             "                            FROM latestNonDeletedAentReln\n"+
//             "                           where relationshipid in (select relationshipid\n"+
//             "                                                      FROM latestNonDeletedAentReln\n"+
//             "                                                      JOIN relationship using (relationshipid)\n"+
//             "                                                      JOIN relntype using (relntypeid)\n"+
//             "                                                     where uuid = "+special_find_id+"\n"+
//             "                                                       and relntypeName = 'SpecialFindSpecialFindLocation')\n"+
//             "                             and uuid != "+special_find_id+")\n"+
//             "        ORDER BY uuid, attributename ASC)\n"+
//             "group by uuid\n"+
//             "order by valuetimestamp desc, uuid, attributename;");
//     }
//     populateList("Special_Find/Special_Find_Location/List_Special_Find_Location",  specialFindLocations);    
// }

/*** Special Find Locations***/
onEvent("Special_Find_Location", "show", "keepTabGroupChanges(\"Special_Find_Location\"); saveSpecialFindLocation(\"\");");
onEvent("Special_Find_Location/Special_Find_Location/TakeGPS", "click", "takeSpecialFindLocationGPS()");
onEvent("Special_Find_Location/Special_Find_Location/Delete", "delayclick", "deleteSpecialFindLocation()");

String special_find_location_id = null;

validateSpecialFindLocation(){
    if (isNull(getFieldValue("Special_Find_Location/Special_Find_Location/Latitude")) || isNull(getFieldValue("Special_Find_Location/Special_Find_Location/Longitude"))) {
        showWarning("Logic Error", "Cannot save Special Find Location without Latitdue or Longitude");
        return;
    }
}

newSpecialFindLocation(){
    special_find_location_id = null;
    newTabGroup("Special_Find_Location");
}

loadSpecialFindLocation() {
    special_find_location_id = getListItemValue();
    loadSpecialFindLocationFrom(special_find_location_id);
}

loadSpecialFindLocationFrom(archent_id) {
    special_find_location_id = archent_id;
    if (isNull(special_find_location_id)) return;
    
    showTabGroup("Special_Find_Location", special_find_location_id);
}

saveSpecialFindLocation() {
    if (!isNull(special_find_location_id)) {
        entity = fetchArchEnt(special_find_location_id);
    }
    Boolean enable_autosave = true;
    saveTabGroup("Special_Find_Location", special_find_location_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            special_find_location_id = uuid;
            onSpecialFindLocationSaved();
        }
        onError(message) {
            showToast(message);
        }
    }, enable_autosave);
}

onSpecialFindLocationSaved(){
    special_find_location_id = getLastSavedRecordId();
    saveEntitiesToRel("SpecialFindSpecialFindLocation", special_find_location_id, special_find_id);
    showToast("Associated with Special Find");
}

deleteSpecialFindLocation(){
    if (!isNull(special_find_location_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Special Find Location Record!", "reallyDeleteSpecialFindLocation()", "doNotDelete()");
    } else {
        cancelTabGroup("Special_Find_Location", true);
    }
}

reallyDeleteSpecialFindLocation(){
    deleteArchEnt(special_find_location_id);
    cancelTabGroup("Special_Find_Location", false);
}

takeSpecialFindLocationGPS(){
    Object position = getGPSPosition();
    Object projPosition = getGPSPositionProjected();
    if (projPosition != null ){
        Double latitude = position.getLatitude();
        Double longitude = position.getLongitude();
        Double northing = projPosition.getLatitude();
        Double easting = projPosition.getLongitude();
        setFieldValue("Special_Find_Location/Special_Find_Location/Latitude", latitude);
        setFieldValue("Special_Find_Location/Special_Find_Location/Longitude", longitude);
        setFieldValue("Special_Find_Location/Special_Find_Location/Northing", northing);
        setFieldValue("Special_Find_Location/Special_Find_Location/Easting", easting);
    } else {
        showToast("GPS Not initialized");
    }
}


/*** Arch Ent: Adobe Element ***/
onEvent("Adobe_Element", "show", "keepTabGroupChanges(\"Adobe_Element\"); saveAdobe(\"\");");
onEvent("Adobe_Element/Adobe_Element/Delete", "delayclick", "deleteAdobe()");
onEvent("Adobe_Element/Adobe_Element/SaveAndNew", "delayclick", "newAdobe();");
onEvent("Adobe_Element/Adobe_Element/ReturnToContext", "delayclick", "cancelTabGroup(\"Adobe_Element\", true)");

String adobe_id = null;

validateAdobe(){
    if (isNull(getFieldValue("Adobe_Element/Adobe_Element/Adobe_Element_ID"))) {
        showWarning("Logic Error", "Cannot save Adobe without Reference ID.");
        return;
    }
}

newAdobe(){
    if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    if (isNull(context_id)){
        showToast("You must save a context first.");
        return;
    }
    adobe_id = null;
    newTabGroup("Adobe_Element");
    adobeAutoNum();
    setFieldValue("Adobe_Element/Adobe_Element/Context_ID", getFieldValue("Context/Context_GeneralInformation/Context_ID"));
    setFieldValue("Adobe_Element/Adobe_Element/Site_Code", getFieldValue("Context/Context_GeneralInformation/Site_Code"));
}

loadAdobe() {
    adobe_id = getFieldValue("Context/Context_Structures/AdobeList");
    if (isNull(adobe_id)) return;
    showTabGroup("Adobe_Element", adobe_id);
}

loadAdobeAttributes(){
    // populateDropDown("Adobe_Element/Adobe_Element/Method_Manufacture",  makeVocab("Method_Manufacture"));
    // populateDropDown("Adobe_Element/Adobe_Element/Shape",  makeVocab("AdobeShape"));

}

saveAdobe(String callback) {
    if (!isNull(adobe_id)) {
        entity = fetchArchEnt(adobe_id);
    }

    if (isNull(context_id)) {
        showWarning("Logic Error", "Adobe cannot be saved as parent context is not saved or loaded.");
        return null;
    } else {
        Boolean enable_autosave = true;
        saveTabGroup("Adobe_Element", adobe_id, null, null, new SaveCallback() {
            onSave(uuid, newRecord) {
                adobe_id = uuid;
                onAdobeSaved();
                execute(callback);
            }
            onError(message) {
                showToast(message);
            }
        }, enable_autosave);
    }
}

onAdobeSaved(){
    adobe_id = getLastSavedRecordId();
    saveEntitiesToRel("ContextAdobe", context_id, adobe_id);
    showToast("Associated with Context");

}

deleteAdobeFromContext(){
    adobe_id = getFieldValue("Context/Context_Structures/AdobeList");
    if (!isNull(adobe_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Photograph Log!", "reallyDeleteAdobe()", "doNotDelete()");
    }
}

deleteAdobe(){
    if (!isNull(adobe_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Adobe!", "reallyDeleteAdobe()", "doNotDelete()");
    } else {
        cancelTabGroup("Adobe_Element", true);
    }
}

reallyDeleteAdobe(){
    deleteArchEnt(adobe_id);
    showTabGroup("Adobe_Element");
    cancelTabGroup("Adobe_Element", false);
}

doNotDelete(){
    showToast("Delete Cancelled.");
}

/*
updateAllContextAdobes() {
    Object contextAdobes = new ArrayList();
    if (!isNull(context_id)){
        contextAdobes = fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
            "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
            "            FROM latestNonDeletedArchentIdentifiers\n"+
            "           WHERE aenttypename = 'Adobe Element'\n"+
            "             AND uuid in (select uuid\n"+
            "                            FROM latestNonDeletedAentReln\n"+
            "                           where relationshipid in (select relationshipid\n"+
            "                                                      FROM latestNonDeletedAentReln\n"+
            "                                                      JOIN relationship using (relationshipid)\n"+
            "                                                      JOIN relntype using (relntypeid)\n"+
            "                                                     where uuid = "+context_id+"\n"+
            "                                                       and relntypeName = 'ContextAdobe')\n"+
            "                             and uuid != "+context_id+")\n"+
            "        ORDER BY uuid, attributename ASC)\n"+
            "group by uuid\n"+
            "order by valuetimestamp desc, uuid, attributename;");
    }
    populateDropDown("Context/Context_Structures/AdobeList",  contextAdobes);
}

*/

/*** Arch Ent: PhotoLog ***/
onEvent("Photograph_Log", "show", "keepTabGroupChanges(\"Photograph_Log\"); savePhotoLog(\"\");");
onEvent("Photograph_Log/Photograph_Log/Delete", "delayclick", "deletePhotoLog()");
onEvent("Photograph_Log/Photograph_Log/SaveAndNew", "delayclick", "savePhotoLog(\"newPhotoLog();\")");
onEvent("Photograph_Log/Photograph_Log/ReturnToContext", "delayclick", "cancelTabGroup(\"Photograph_Log\", true)");

String photolog_id = null;

validatePhotoLog(){
    if (isNull(getFieldValue("Photograph_Log/Photograph_Log/Photograph_Reference_ID"))) {
        showWarning("Logic Error", "Cannot save Photgraph without Reference ID.");
        return;
    }
}

newPhotoLog(){
    if (isNull(getFieldValue("Context/Context_GeneralInformation/Context_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    if (isNull(context_id)){
        showToast("You must save a context first.");
        return;
    }
    photolog_id = null;
    newTabGroup("Photograph_Log");
    setFieldValue("Photograph_Log/Photograph_Log/Context_ID", getFieldValue("Context/Context_GeneralInformation/Context_ID"));
}

loadPhotoLog() {
    photolog_id = getFieldValue("Context/Context_Attachments/PhotoLogList");
    if (isNull(photolog_id)) return;
    showTabGroup("Photograph_Log", photolog_id);
}

loadPhotoLogAttributes(){
    // populateDropDown("Photograph_Log/Photograph_Log/Camera", makeVocab("Camera"));
}

savePhotoLog(String callback) {
    if (!isNull(photolog_id)) {
        entity = fetchArchEnt(photolog_id);
    }
    Boolean enable_autosave = true;
    saveTabGroup("Photograph_Log", photolog_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            photolog_id = uuid;
            onPhotoLogSaved();
            execute(callback);
        }
        onError(message) {
            showToast(message);
        }
    }, enable_autosave);
}

onPhotoLogSaved(){
    photolog_id = getLastSavedRecordId();
    saveEntitiesToRel("ContextPhotographLog", context_id, photolog_id);
    showToast("Associated with Context");

}

deletePhotoLogFromContext(){
    photolog_id = getFieldValue("Context/Context_Attachments/PhotoLogList");
    if (!isNull(photolog_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Photograph Log!", "reallyDeletePhotoLog()", "doNotDelete()");
    }
}

deletePhotoLog(){
    if (!isNull(photolog_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Photograph Log!", "reallyDeletePhotoLog()", "doNotDelete()");
    } else {
        cancelTabGroup("Photograph_Log", true);
    }
}

reallyDeletePhotoLog(){
    deleteArchEnt(photolog_id);
    showTabGroup("Photograph_Log");
    cancelTabGroup("Photograph_Log", false);
}

doNotDelete(){
    showToast("Delete Cancelled.");
}



// Stuff that needs to happen after everything.

// loadContextAttributes();
// loadContextGroupAttributes();
// loadArtefactGroupAttributes();
// loadSampleAttributes();
// loadMatrixAttributes();
// loadSpecialFindAttributes();
// loadPhotoLogAttributes();
// loadAdobeAttributes();
